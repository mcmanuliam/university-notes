{"path":"university/year 2/semester 1/Data Storage and Retrieval/Slides/2. Design & implementation of a (relational) database application.pdf","text":"Data Storage and Retrieval Lecture 2 Dr. Graham McDonald Graham.McDonald@glasgow.ac.uk What is Data 2 data 52 information J Smith’s score on the final exam is 52% knowledge I’ve passed! • A database (abbreviated DB) is an entity in which data can be stored in a persistent and structured manner, with as little redundancy as possible • A database centralises users access to data, which they can view, enter, or update • within the limits of the access rights granted to them • It is viewable (and writable) by many users at the same time (controlled concurrent access) 3 What is a Database • The DBMS is a suite of services (software applications) for managing (one or more) databases, which involves: • enabling simple access to data • allowing multiple users access to the information • manipulating the data found in the database (inserting, deleting, editing) • It also controls the security and integrity of the database • The DBMS accepts requests for data from the application program and instructs the operating system to transfer the appropriate data • Varying forms of data access may be supported by the DBMS 4 What is a Database Management System (DBMS) DBMS Interface Data Engine Languages 5 DBMS Interface Forms of Data Access: Local Database DBMS Interface (server) (client) Interface Interface 6 Forms of Data Access: Client / Server Forms of data access – Web-based Webpage Browser (server) (client) DBMS Browser 7 Forms of Data Access: Web-based Database Management Systems (DBMSs) Raw Resources (bare metal) DBMS Your Applications Go Here MS AccessMS SQL mySQLPostgreSQLOracle 8 DBMS abstractions allow this interface to be cleanly defined and this allows applications and data management systems to be implemented separately. SQL Database Management System Customer Sys Reviewer’s Sys Admin’s Sys Host System users applications DBMS Host The Data 9  Users  Applications  DBMS  The Data (& the Database)  The Host system Amazon Example Main Components of a Database DESIGNING DATABASE SYSTEMS Who will use this database? What will they see? What data will we store? Database Systems: Three-Level Architecture 11  We can think about a database system at three levels, called “schemas”: ¡ External: how users view data ¡ Conceptual: how programmers model and implement the database in the database ¡ Internal: how the DBMS stores the data  In designing a database, we take an external schema, Files and design a corresponding conceptual schema. The DBMS handles the internal schema, with hints from the designer. Three-Level Architecture: Election Example External Schema Conceptual Schema Internal Schema 12 Example: Amazon • Stores data about products and their related details (name, price, colour, product code…….) • A customer can view products, search products, buy a product and rate reviews • An admin person can upload products & edit product info • A reviewer can write reviews • ………. 13 Database Management System Customer Sys Reviewer’s Sys Admin’s Sys Host System 14 An Example Database System: Amazon Database Management System Customer Sys Reviewer’s Sys Admin’s Sys Host System a Java program a Python program web technology implemented in Oracle, DB2, etc Unix/Linux/ Windows Server 15 Multiple Views An Example Database System: Amazon Three-level Architecture: Amazon Example External Schema Conceptual Schema Internal Schema 16 • Databases are used by people… to perform particular tasks, obtain views on the data • Databases therefore need interfaces to allow people access to the data • Many people may need to access the same database • Web pages / mApps are just one way of implementing an interface to a database • We must consider the needs of the users when designing a database … our next focus. • Database design: taking external schemas to identify the conceptual scheme. The DBMS will handle the internal schema 17 Summary 18 Database Design Lifecycle • Requirements analysis • User needs; what must database do? • Conceptual design • High-level description; often using E/R model • Logical design • Translate E/R model into (typically) relational schema • Schema refinement • Check schema for redundancies and anomalies • Physical design/tuning • Consider typical workloads, and further optimise Today Lecture 3 • How do we go about designing a database from scratch? 19 Database DesignFirstly Some Terminology • A data model: • Description of the objects that could be represented by a computer system together with their properties and relationships • Typically \"real world\" objects, e.g. products, suppliers, customers, and orders • A schema: • Description of how a database can be designed to represent a data model • E.g. tables with columns definitions: Suppliers have names, addresses, etc • A database: • Instance of a schema with corresponding data • E.g. Amazon’s suppliers/customers/orders. 20 WE DO THESE IN ORDER! • Creating a database involves: • (1) Capturing user requirements • (2) Representing them in a MODEL • (3) Converting the model into a SCHEMA • (4) Implementation of the schema on a DBMS • Many different ways to implement a database • Many different models and tools you can use • All require the stages above 21 Database Design • Users • access the data only (casual vs. expert) • need an effective means of accessing the data • Database designers: • specify schema and content • (web) Application developers: • extend functionality; provide means of data access for a particular application • Database administrators • Maintain accuracy, speed and integrity • Web-site designers All involved in the design process need to think about the final users 22 People Involved • Talk to client • E.g. CEO of the bank, the chief of BT….. • Talk to customers • End users of the system • Those that might view the data • Talk to different levels of users • Admin, programmers, technical staff…. • People who might need to add/update/query data Users 23 1 – Identifying User Requirements • Write down all the different ‘THINGS’ that you need to store data about • Customers, branches, accounts….. • What do we need to know about these things? i.e., what are the attributes that describe the things? • Take note of any relationships between the things talked about • All customers must belong to one branch only • All accounts must only have one account number 24 1 – Identifying Data Requirements Customer Branch - Name - name - address - address - overdraft limit - manager - address - ID - ID This could start to get quite complicated if there are lots of things to store information about in the database 25 Organising into Data Objects • We need a way to represent all the data we have captured relating to what we want to store in our database • Helps us during design and implementation • Helps to communicate ideas to other members of the team 26 2 – Data ModellingRemember the three-level Architecture? • External: how users view data • Conceptual: how programmers plan and implement the database in the database • Internal: how the DBMS stores the data Files 27 Data Modelling External → Conceptual → Internal • We develop a conceptual data model, based on talking to users and considering existing external views • High-level description of data, i.e. close to their real world (external) meaning - entity types, attributes & relationships • The conceptual data model can then be converted into a conceptual schema describing how data is stored • For instance as tables and records • These are Implementation-level/logical Data Models • Low-level or Physical Data Models describe how data is internally stored on the computer: • files, storage structures, etc. • This is handled by the DBMS, with occasional help from the DBA 28 1. External Schema (aka User Needs) 2. Conceptual Model 4. Internal Schema 3. Implementation Model: Conceptual Schema Supplier(ID, Name, Address, Postcode) Product(ID, Supplier, Title) Customer_Orders_Products( … Conversion depends on Database Model used by DBMS Back to the Amazon Example 29 Real World (users) Conceptual Data Model What are the concepts involved? External How can we represent these in a database? Conceptual Schema Physical Model DBMSDatabase Designer Implementation/ Logical Model Suppliers(ID, Name, Address) Products(Id, Supplier, Title) Customer_Orders_Products() … Chosen by DBMS Internal Schema 30 Why Use Data Modelling? A data model is: • An abstract representation of the data we wish to store • A convention for the specification of the logical structure of real-world information The choice of data model depends on the type of database… • We will use the Entity Relationship Model • Entities, relationships and attributes (Chen, 1976) • …which easily maps to the Relational DBMS Once we have a conceptual data model for a problem in terms of an Entity Relationship diagram, we can easily generate a conceptual schema for the database 31 Relational DBMS • In older DBMS, the code for data management and application were all tangled together • Hard to modify, hard to generalise • Data manipulation code written with little abstraction • Instead many modern DBMS follow the relational model (RDBMS) • Data is stored in relational tables • It links very well with Entity/Relationships (E/R) form of Conceptual Data Modelling • E/R modelling and corresponding Relational DBMS will be the focus of the next lectures E.F. Codd 1923-2003 32 Next Lecture: E/R Modelling 1. We identify THINGS - entities • these are typically \"real world\" objects such as products, suppliers, customers, and orders 2. We identify what we know about each kind of THINGS • Attributes of an object, such as name, address 3. We identify relationships between types of THINGS • One bank branch has many customers 4. We follow rules to make a database schema 33 • How to construct an ER diagram • More on relationships and attributes 34 Next Lecture: E/R Modelling","libVersion":"0.3.2","langs":""}