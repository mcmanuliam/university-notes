{"path":"university/year 2/semester 1/Practical Algorithms/Slides/7. Counting/Counting.pdf","text":"Counting (a.k.a. Combinatorics) BUT I KNOW HOW TO COUNT ALREADY! This Photo by Unknown Author is licensed under CC BY-SA COUNTING?There’s Counting, and there’s Formal Counting • The number of operations performed by nested loops? → Big-Oh complexity • How many different IP addresses are there for a given protocol e.g. IPv4/6? • How many paths there are between vertices in a graph? • The number of possible passwords given certain size + possible symbols? • Number of subsets of a finite set? • How many unique “addressable” memory locations given address of a certain width? Ashtung! This Photo by Unknown Author is licensed under CC BY-SA-NC You know and use the “rules” we are about to study (specially product and sum rules) Don’t let the formalism that follows make you think otherwise. The formalism simply allows us to reason about less intuitive problems, and derive general rules. The product rule: Motivating Problem • Suppose a password on a computer system consists of 4 characters. Let’s consider these two different scenarios. 1. Each must be a digit 2. Each must be a digit or a letter of the alphabet (small case only) • There are no other constraints. • How many such passwords are there for Case #1? Case #2? Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. IF There are n1 ways to do the first task and n2 ways to do the second task THEN Then there are n1∙n2 ways to do the procedure. Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. IF There are n1 ways to do the first task and n2 ways to do the second task THEN Then there are n1∙n2 ways to do the procedure. Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Back to the Motivating Problem: The Product Rule • Suppose a password on a computer system consists of 4 characters. • Each must be a digit • There are no other constraints. • How many such passwords are there? Back to the Motivating Problem: The Product Rule • Suppose a password on a computer system consists of 4 characters. • Each must be a digit • There are no other constraints. • How many such passwords are there? Back to the Motivating Problem: The Product Rule • Suppose a password on a computer system consists of 4 characters. • Each must be a digit OR a letter of the alphabet (small case only) • There are no other constraints. • How many such passwords are there? Back to the Motivating Problem: The Product Rule • Suppose a password on a computer system consists of 4 characters. • Each must be a digit OR a letter of the alphabet (small case only) • There are no other constraints. • How many such passwords are there? Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Example: How many bit strings of length seven are there? (You can think of placing a bit at one location as a “task”) Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Example: How many bit strings of length seven are there? (You can think of placing a bit at one location as a “task”) Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Example: How many bit strings of length seven are there? (You can think of placing a bit at one location as a “task”) Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Example: How many bit strings of length seven are there? Solution: Since each of the seven bits is either a 0 or a 1, the answer is 27 = 128. Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Example: How many digit strings (0-9) of length seven are there? Basic Counting Principles: The Product Rule The Product Rule: A procedure can be broken down into a sequence of two tasks. There are n1 ways to do the first task and n2 ways to do the second task. Then there are n1∙n2 ways to do the procedure. Example: How many digit strings (0-9) of length seven are there? The Product Rule Example: How many different license plates can be made if each plate contains a sequence of three uppercase English letters followed by three digits? Solution: ? The Product Rule Example: How many different license plates can be made if each plate contains a sequence of three uppercase English letters followed by three digits? Solution: By the product rule, there are 26 ∙ 26 ∙ 26 ∙ 10 ∙ 10 ∙ 10 = 17,576,000 different possible license plates. The Product Rule – We’ve been using it already! • How many times is the <loop-body> executed? k := 0 for i1 := 1 to n1 for i2 := 1 to n2 . . . for im = 1 to nm <loop-body> The Product Rule • How many times is the <loop-body> executed? k := 0 for i1 := 1 to n1 for i2 := 1 to n2 . . . for im = 1 to nm <loop-body> The Product Rule • How many times is the <loop-body> executed? k := 0 for i1 := 1 to n1 for i2 := 1 to n2 . . . for im = 1 to nm <loop-body> Product Rule in Cartesian ProductsProduct Rule in Cartesian Products • If A1, A2, … , Am are finite sets, then the number of elements in the Cartesian product of these sets is the product of the number of elements of each set. • The task of choosing an element in the Cartesian product A1 ⨉ A2 ⨉ ∙∙∙ ⨉ Am is done by choosing an element in A1, an element in A2 , …, and an element in Am. • By the product rule, it follows that: |A1 ⨉ A2 ⨉ ∙∙∙ ⨉ Am |= |A1| ∙ |A2| ∙ ∙∙∙ ∙ |Am|. SUM RULE The sum rule: Motivating Problem Suppose statement labels in a programming language can be either a single letter OR a single digit. Find the number of possible labels. Basic Counting Principles: The Sum Rule The Sum Rule: If: a task can be done either in one of n1 ways OR in one of n2, where: none of the elements of set of n1 ways is the same as any of the n2 ways, then: there are n1 + n2 ways to do the task. The sum rule: Motivating Problem Suppose statement labels in a programming language can be either a single letter OR a single digit. Find the number of possible labels. The sum rule: Back to the Motivating Problem Suppose statement labels in a programming language can be either a single letter OR a single digit. Find the number of possible labels. By sum rule, there are 26 + 10 = 36 possible labels The Sum Rule: Example The Sum Rule: If: a task can be done either in one of n1 ways OR in one of n2, where: none of the set of n1 ways is the same as any of the n2 ways, then: there are n1 + n2 ways to do the task. The mathematics department must choose either a student OR a faculty member as a representative for a university committee. How many choices are there for this representative if there are 37 members of the mathematics faculty and 83 mathematics majors, and no one is both a faculty member and a student. ? The Sum Rule: Example The Sum Rule: If: a task can be done either in one of n1 ways OR in one of n2, where: none of the set of n1 ways is the same as any of the n2 ways, then: there are n1 + n2 ways to do the task. The mathematics department must choose either a student OR a faculty member as a representative for a university committee. How many choices are there for this representative if there are 37 members of the mathematics faculty and 83 mathematics majors and no one is both a faculty member and a student. Solution: By the sum rule it follows that there are 37 + 83 = 120 possible ways to pick a representative. The Sum Rule in terms of sets The Sum Rule: If: a task can be done either in one of n1 ways OR in one of n2, where: none of the set of n1 ways is the same as any of the n2 ways, then: there are n1 + n2 ways to do the task. Let’s say set A consists of the n1 ways the task can be done in one way and set B consists of the n2 ways the task can be done in another way Then A ∪ B contains all possible ways the task can be done So we can find the total options/ways by finding the cardinality of this Union (i.e. the number of elements in A ∪ B) The Sum Rule in terms of sets The Sum Rule: If: a task can be done either in one of n1 ways OR in one of n2, where: none of the set of n1 ways is the same as any of the n2 ways, then: there are n1 + n2 ways to do the task. Let’s say set A consists of the n1 ways the task can be done in one way and set B consists of the n2 ways the task can be done in another way Then A ∪ B contains all possible ways the task can be done So we can find the total options/ways by finding the cardinality of this Union (i.e. the number of elements in A ∪ B) The Sum Rule in terms of sets • Hence, the sum rule can be phrased in terms of sets. |A ∪ B|= |A| + |B| as long as A and B are disjoint sets. • Or more generally, The Sum Rule in terms of sets • Hence, the sum rule can be phrased in terms of sets. |A ∪ B|= |A| + |B| as long as A and B are disjoint sets. • Or more generally, |A1 ∪ A2 ∪ ∙∙∙ ∪ Am |= |A1| + |A2| + ∙∙∙ + |Am| when Ai ∩ Aj = ∅ for all i, j. The Sum Rule in terms of sets • Hence, the sum rule can be phrased in terms of sets. |A ∪ B|= |A| + |B| as long as A and B are disjoint sets. • Or more generally, • What if there are common elements? (sets are not disjoint?) |A1 ∪ A2 ∪ ∙∙∙ ∪ Am |= |A1| + |A2| + ∙∙∙ + |Am| when Ai ∩ Aj = ∅ for all i, j. THE INCLUSION-EXCLUSION RULE (ALSO KNOWN AS: SUBTRACTION RULE) Can you solve this using product and/or sum rule? • How many bit strings of length 8 either start with a 1 or end with 00 (or both)? Can you solve this using product and/or sum rule? • How many bit strings of length 8 either start with a 1 or end with 00 (or both)? Can you solve this using product and/or sum rule? • How many bit strings of length 8 either start with a 1 or end with 00 (or both)? Inclusion-exclusion principle - Introduction How many bit strings of length 8 either start with a 1 or end with 00? − there are 28 bit strings of length 8 ******** product rule: 8 positions each can be filled in 2 different ways Inclusion-exclusion principle - Introduction How many bit strings of length 8 either start with a 1 or end with 00? − there are 28 bit strings of length 8 − there are 27 bit strings of length 8 that start with a 1 • note, this also includes strings that end with 00 1******* product rule: 7 positions each can be filled in 2 different ways Inclusion-exclusion principle - Introduction How many bit strings of length 8 either start with a 1 or end with 00? − there are 28 bit strings of length 8 − there are 27 bit strings of length 8 that start with a 1 − there are 26 bit strings of length 8 that end with 00 • note, this also includes strings that start with a 1 ******00 product rule: 6 positions each can be filled in 2 different ways Inclusion-exclusion principle - Introduction How many bit strings of length 8 either start with a 1 or end with 00? − there are 28 bit strings of length 8 − there are 27 bit strings of length 8 that start with a 1 − there are 26 bit strings of length 8 that end with 00 − using sum rule • there are 27 + 26 bit strings that start with 1 or end with 00 • but we have over-counted • adding in twice the strings that start with 1 and end with 00 Inclusion-exclusion principle - Introduction How many bit strings of length 8 either start with a 1 or end with 00? − there are 28 bit strings of length 8 − there are 27 bit strings of length 8 that start with a 1 − there are 26 bit strings of length 8 that end with 00 − using sum rule • there are 27 + 26 bit strings that start with 1 or end with 00 • but we have over-counted • adding in twice the strings that start with 1 and end with 00 − there are 25 bit strings of length 8 that start with a 1 and end with 00 1*****00 product rule: 5 positions each can be filled in 2 different ways Inclusion-exclusion principle - Introduction How many bit strings of length 8 either start with a 1 or end with 00? − there are 28 bit strings of length 8 − there are 27 bit strings of length 8 that start with a 1 − there are 26 bit strings of length 8 that end with 00 − using sum rule • there are 27 + 26 bit strings that start with 1 or end with 00 • but we have over-counted • adding in twice the strings that start with 1 and end with 00 − there are 25 bit strings of length 8 that start with a 1 and end with 00 − therefore we actually have 27 + 26 - 25 bit strings Inclusion-exclusion principle - Introduction overcounted strings of the form 1*****00 bit strings of length 8 1******* ******00 Basic Counting Principles: Principle of Inclusion-Exclusion (also known as principle Subtraction Rule) Principle of Inclusion-Exclusion: If a task can be done either in one of n1 ways or in one of n2 ways, then the total number of ways to do the task is n1 + n2 minus the number of ways to do the task that are common to the two different ways. • Also known as, the Subtraction Rule: • The SUM RULE was simply a special case of this principle, where the sets where assumed to be disjoint, so their intersection was empty, and thus 𝐴 ∩ 𝐵 = 0 Combining Product and Sum Rules This Photo by Unknown Author is licensed under CC BY-SA Combining the Sum and Product Rule Example: Suppose statement labels in a programming language can be either a single letter OR a letter followed by a digit. Find the number of possible labels. Solution: ? Combining the Sum and Product Rule Example: Suppose statement labels in a programming language can be either a single letter OR a letter followed by a digit. Find the number of possible labels. Solution: ? Combining the Sum and Product Rule Example: Suppose statement labels in a programming language can be either a single letter OR a letter followed by a digit. Find the number of possible labels. Solution: Use the sum and product rule. 26 ∙ 10 = Combining the Sum and Product Rule Example: Suppose statement labels in a programming language can be either a single letter OR a letter followed by a digit. Find the number of possible labels. Solution: Use the sum and product rule. 26 + 26 ∙ 10 = 286 The sum and product rules - Example How many passwords are there, where the passwords must have − 6 alpha-numeric characters and first character must be a capital letter − ? The sum and product rules - Example How many passwords are there, where the passwords must have − 6 alpha-numeric characters and first character must be a capital letter There are 26 choices for the 1st position − i.e. A or B or C or … or Z The sum and product rules - Example How many passwords are there, where the passwords must have − 6 alpha-numeric characters and first character must be a capital letter There are 26 choices for the 1st position − i.e. A or B or C or … or Z Other positions? The sum and product rules - Example How many passwords are there, where the passwords must have − 6 alpha-numeric characters and first character must be a capital letter There are 26 choices for the 1st position − i.e. A or B or C or … or Z Using the sum rule there are 26+26+10 = 62 choices for each of the 2nd, 3rd, 4th, 5th and 6th positions (a-z, A-Z, or 0-9) The sum and product rules - Example How many passwords are there, where the passwords must have − 6 alpha-numeric characters and first character must be a capital letter There are 26 choices for the 1st position − i.e. A or B or C or … or Z Using the sum rule there are 26+26+10 = 62 choices for each of the 2nd, 3rd, 4th, 5th and 6th positions (a-z, A-Z, or 0-9) Using the product rule this yields a total of 26⋅62⋅62⋅62⋅62⋅62 = 23,819,453,632 choices The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? There are 26+26+10=62 available characters (sum rule) 62r passwords of length r (product rule) The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? There are 26+26+10=62 available characters (sum rule) 62r passwords of length r (product rule) So 624 passwords of length 4 So 625 passwords of length 5 So 626 passwords of length 6 The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? There are 26+26+10=62 available characters (sum rule) 62r passwords of length r (product rule) So 624 passwords of length 4 So 625 passwords of length 5 So 626 passwords of length 6 624+625+626 = 57,731,144,752 passwords in total (sum rule) The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? We have to exclude passwords consisting of − just letters: (26+26)4 + (26+26)5 + (26+26)6 = 20,158,125,312 The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? We have to exclude passwords consisting of − just letters: (26+26)4 + (26+26)5 + (26+26)6 = 20,158,125,312 − just digits: 104 + 105 + 106 = 1,110,000 The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? We have to exclude passwords consisting of − just letters: (26+26)4 + (26+26)5 + (26+26)6 = 20,158,125,312 − just digits: 104 + 105 + 106 = 1,110,000 Hence there are 57,731,144,752 – (20,158,125,312 + 1,110,000) passwords which contain at least one letter and one digit The sum and product rules - Example Suppose that a password is of length between 4 and 6 characters, consists of letters and digits, and is case sensitive − how many distinct passwords are there? − how many contain at least one letter and at least one digit? − how long would it take a hacker to test all passwords at 109 tests per second? At 109 tests per second, we need 57,731,144,752/109=57.7 seconds so all passwords could be checked in less than 1 minute Note! • For this problem... − how many contain at least one letter and at least one digit? • ...we could have taken another (maybe more intuitive, but also more difficult to compute) approach, of adding up the count of all VALID categories of passwords (instead of subtracting all INVALID categories from the grand total). • So, we could have added all the following counts to arrive at the _same_ answer (check yourself to confirm) − 4 character passwords with 1 letter and 3 digits − 4 character passwords with 2 letters and 2 digits − 4 character passwords with 3 letters and 1 digits − 5 character passwords with 1 letter and 4 digits − 5 character passwords with 2 letters and 3 digits − 5 character passwords with 3 letters and 2 digits − 5 character passwords with 4 letters and 1 digit − 6 character passwords with 1 letter and 5 digits − 6 character passwords with 2 letters and 4 digits − 6 character passwords with 3 letters and 3 digits − 6 character passwords with 4 letters and 2 digits − 6 character passwords with 5 letters and 1 digit • Hence: sometimes, when there are less INVALID categoroes and more VALID categories, it is much easier to subtract count of INVALID cagtegories from a total, rather then add all VALID categories. THE PIGEONHOLE PRINCIPLE https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Pigeons-in-holes.jpg/592px-Pigeons-in-holes.jpg The Pigeonhole Principle • If a flock of 13 pigeons roosts in a set of 12 pigeonholes, one of the pigeonholes must have more than 1 pigeon. The Pigeonhole Principle • If a flock of 13 pigeons roosts in a set of 12 pigeonholes, one of the pigeonholes must have more than 1 pigeon. The Pigeonhole Principle • If a flock of 13 pigeons roosts in a set of 12 pigeonholes, one of the pigeonholes must have more than 1 pigeon. Pigeonhole Principle: If k is a positive integer and k + 1 objects are placed into k boxes, then at least one box contains two or more objects. Pigeonhole Principle Example: Among any group of 367 people, there must be at least two with the same birthday, because there are only 366 possible birthdays. Pigeonhole Principle – How to answer this question? Example: What if there were 1000 people? there must be at least ___?___ with the same birthday, because there are only 366 possible birthdays. . The pigeonhole principle - GENERALIZATION • Let’s say we have 4 pigeonholes. • Then, if there are 12 pigeons, then at least one box will have ____ (or more) pigeons. The pigeonhole principle - GENERALIZATION • Let’s say we have 4 pigeonholes. • Then, if there are 12 pigeons, then at least one box will have ____ (or more) pigeons. • Let’s say we have 4 pigeonholes. • Then, if there are 12 pigeons, then at least one box will have ____ (or more) pigeons. The pigeonhole principle - GENERALIZATIONThe pigeonhole principle - GENERALIZATION • Let’s say we have 4 pigeonholes. • Then, if there are 13 pigeons, then at least one box will have __?_ (or more) pigeons. The pigeonhole principle - GENERALIZATION • Let’s say we have 4 pigeonholes. • Then, if there are 13 pigeons, then at least one box will have ___ (or more) pigeons. The pigeonhole principle - GENERALIZATION • Let’s say we have 4 pigeonholes. • Then, if there are 13 pigeons, then at least one box will have ___ (or more) pigeons. The pigeonhole principle - GENERALIZATION • Let’s say we have 4 pigeonholes. The pigeonhole principle - GENERALIZATION • Let’s say we have 4 holes. • If there are 12 pigeons, then at least one box will have ceil(12/4) = ceil (3) = 3 (or more) pigeons • If there are 13 pigeons, then at least one box will have ceil(13/4) = ceil (3.25) = 4 (or more) pigeons • If there are 14 pigeons, then at least one box will have ceil(14/4) = ceil (3.50) = 4 (or more) pigeons • If there are 15 pigeons, then at least one box will have ceil(15/4) = ceil (3.75) = 4 (or more) pigeons • If there are 16 pigeons, then at least one box will have ceil(16/4) = ceil (4) = 4 (or more) pigeons • If there are 17 pigeons, then at least one box will have ceil(17/4) = ceil (4.25) = 5 (or more) pigeons The pigeonhole principle - GENERALIZATION If k+1 objects are placed in k containers then one container must contain at least 2 objects The generalised pigeonhole principle: The pigeonhole principle - GENERALIZATION If k+1 objects are placed in k containers then one container must contain at least 2 objects The generalised pigeonhole principle: − ceil(x) (the ceiling of x) the smallest integer greater than or equal to x − i.e.round up to the nearest integer (example: 3.001 becomes 4) if n objects are placed in k containers, then at least one container has at least ceil(n/k) objects or m = ceil (n/k) Pigeonhole Principle – Coming back to this question Example: What if there were 1000 people? there must be at least ___?___ with the same birthday, because there are only 366 possible birthdays. . The pigeonhole principle – Example 1 Given 100 people in a room, at least how many people are born in the same month? if n objects are placed in k containers, then at least one container has at least ceil(n/k) objects: m = ceil (n/k) The pigeonhole principle – Example 1 Given 100 people in a room, at least how many people are born in the same month? What are the containers? months people are born (size 12) What are the objects? people (size 100) if n objects are placed in k containers, then at least one container has at least ceil(n/k) objects: m = ceil (n/k) The pigeonhole principle – Example 1 Given 100 people in a room, at least how many people are born in the same month? What are the containers? months people are born (size 12) What are the objects? people (size 100) Answer: ceil(100/12)=ceil(8.333)=9 if n objects are placed in k containers, then at least one container has at least ceil(n/k) objects: m = ceil (n/k) The pigeonhole principle – Example 2 A bowl contains 10 red and 10 blue balls A person selects balls at random, without replacement How many balls must be selected to be sure of getting at least three balls of the same colour? 98 If n objects are placed in k containers, then at least one container has at least ceil(n/k) objects: m = ceil (n/k) Point to note! While this is still a “pigeon-hole” problem, the unknown is not what is was in earlier problems. Before, the question was: given n objects are placed in k containers, then at least one container will have at least how many object? The unknown was: m Now: We know that, given k containers, at least one container has at least m items. What is the minimum number of items picked? The unknown now is: n m = ceil (n/k) The pigeonhole principle – Example 2 A bowl contains 10 red and 10 blue balls A person selects balls at random, without replacement How many balls must be selected to be sure of getting at least three balls of the same colour? What are the containers? If n objects are placed in k containers, then at least one container has at least ceil(n/k) objects. m = ceil (n/k) 100 The pigeonhole principle – Example 2 A bowl contains 10 red and 10 blue balls A person selects balls at random, without replacement How many balls must be selected to be sure of getting at least three balls of the same colour? What are the containers? ball colours (size 2) 101 If n objects are placed in k containers, then at least one container has at least ceil(n/k) objects. m = ceil (n/k) The pigeonhole principle – Example 2 A bowl contains 10 red and 10 blue balls A person selects balls at random, without replacement How many balls must be selected to be sure of getting at least three balls of the same colour? What are the k containers? ball colours (size 2) What are the n objects? balls selected (what we want to find) 102 If n objects are placed in k containers, then at least one container has at least ceil(n/k) objects. The pigeonhole principle – Example 2 A bowl contains 10 red and 10 blue balls A person selects balls at random, without replacement How many balls must be selected to be sure of getting at least three balls of the same colour? What are the k containers? ball colours (size 2) What are the n objects? balls selected (size n – what we want to find) Answer: smallest n such that m = ceil(n/2) = 3, i.e. n=5 − since 4/2=2 and 5/2=2.5 103 If n objects are placed in k containers, then at least one container has at least ceil(n/k) objects. m = ceil (n/k) A bit more on the maths Given ceil(n/2)=3 − how do we find n? Or, in general, given: ceil(n/k) = m − how do we find n (total number of items placed in buckets) − given: • k (number of buckets) • m (at least one bucket must have these many items) A bit more on the maths Given ceil(n/2)=3 − how do we find n? Or, in general, given: ceil(n/k) = m − how do we find n (total number of items placed in buckets) − given: • k (number of buckets) • m (at least one bucket must have these many items) First, find n such that n/k = m-1 − e.g., n/2 = 3-1 = 2; then n=4 A bit more on the maths Given ceil(n/2)=3 − how do we find n? Or, in general, given: ceil(n/k) = m − how do we find n (total number of items placed in buckets) − given: • k (number of buckets) • m (at least one bucket must have these many items) First, find n such that n/k = m-1 − e.g., n/2 = 3-1 then n=4 Then at this current value for n, n/k is exactly equal to m-1 - e.g., 4/2 = 2 A bit more on the maths Given ceil(n/2)=3 − how do we find n? Or, in general, given: ceil(n/k) = m − how do we find n (total number of items placed in buckets) − given: • k (number of buckets) • m (at least one bucket must have these many items) − reasoning to get to the answer: find n such that n/k is exactly equaly to m-1; one less than the number we are looking for. − then, simply add one to n First, find n such that n/k = m-1 − e.g., n/2 = 3-1 then n=4 Then at this current value for n, n/k is exactly equal to m-1 - e.g., 4/2 = 2 This means if we increase n by 1, then taking ceil(n/k) will get us to m − e.g., ceil((4+1)/2) = ceil(5/2) = 3 − so the answer is n = 3 Solve the same example but with different k and m A bowl contains 10 red, 10 blue balls, and 10 green balls (so k = 3) A person selects balls at random, without replacement How many balls must be selected to be sure of getting at least five (so m = 5) balls of the same colour? − We know that m = ceil(n/k), i.e., 5 = ceil(n/3) − How much is n? 108 Solve the same example but with different k and m A bowl contains 10 red, 10 blue balls, and 10 green balls (so k = 3) A person selects balls at random, without replacement How many balls must be selected to be sure of getting at least five (so m = 5) balls of the same colour? − We know that m = ceil(n/k), i.e., 5 = ceil(n/3) − How much is n? − Find n such that n/k=m-1, i.e., n/3 = 4, so n=12 − Answer is 12+1 = 13 − Check: ceil(13/3) = ceil(4.33) = 5 109","libVersion":"0.3.2","langs":""}