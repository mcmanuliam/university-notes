{"path":"software engineering/year 2/semester 1/Data Storage and Retrieval/Slides/4. From ER Models to Tables.pdf","text":"Data Storage and Retrieval Lecture 4 From ER Models to Tables Dr. Graham McDonald Graham.McDonald@glasgow.ac.uk Database design lifecycle • Requirements analysis • User needs; what must database do? • Conceptual design • High-level description; often using E/R model • Logical design • Translate E/R model into (typically) relational schema • Schema refinement • Check schema for redundancies and anomalies • Physical design/tuning • Consider typical workloads, and further optimise Today 2 Overview • Understanding Entities & Relationships as ‘Tables’ in a database • Converting your diagram into tables 3 Reminder - Data Modelling • ER Model allowed us to establish the relationships and dependencies amongst the information • We now need to arrange the data into a logical structure of relations • The logical structure can then be mapped into the storage objects supported by the database – i.e. tables 4 Entities à Tables Roughly, a table (relation) is constructed for each item of interest in a DB A relation equates (approximately) to an entity type (or some form of relationship) in the ER diagram. 5 The Heading • All relations must have a heading • Name of relation • Student • Names of columns of relation (the attributes) • Name, student ID, exam1, exam2 STUDENT (Name, Student ID, exam1, exam2) The number of attributes determines the DEGREE of the relation 6 Tuples • The rows of a relation comprise its body • These are referred to as TUPLES • A tuple (record) is a row of a relation, i.e. a set of values which are instances of the attributes • e.g. < ‘Fraser’, 880123, 66, 90 > • The meaning of each value is determined by its position in the tuple 7 Relations à Schema • A relation schema is a set of attributes • written R (A1, A2,. . .An) e.g. • Student (name: Text, matric: Number, ex1: Number, ex2: Number) • Each attribute in a relation schema has a domain • A relational database schema is a set of these relation schemas 8 Domains • Domains are a lot like Data Types in programming • Defines the set of values that can be assigned to an attribute • Determines the range of allowable operations on each value • Add, subtract, concatenate……. 9 • A domain is a set of atomic values that can be assigned to an attribute • A domain has two aspects: • its meaning - e.g. the set of matriculation numbers • its format - e.g. a integer in range 0…9999999 • Different DBMS offer different sets of domains: • MS Access offers: Text, Number, Memo, Date/Time, Currency, AutoNumber, Yes/No, etc. - NOT SQL STANDARD • MySQL offers standard SQL types: CHAR (fixed length strings), VARCHAR (variable length strings), INT, FLOAT, DATE... 10 Domains Quick Reference: (My)SQL Data Types Data Type Description Examples INT Integer number 1, 5, -100 FLOAT, DOUBLE Floating point number -1.1, 5, 6e10 BOOLEAN Boolean 1, 0 (MySQL doesn’t have BOOLEAN) TINYINT(1) Integer with only 1 bit 1, 0 CHAR(x) Fixed length string of length x ‘A ‘ VARCHAR(x) Variable length string up to length x ‘A’ DATE, TIME, TIMESTAMP Various date/time data types ’2016-01-01 00:00:00.000000' See also: https://dev.mysql.com/doc/refman/8.0/en/data-types.html 11 Converting Your ER Diagram to Tables Translating E-R to Relational Schema 1. Entities and their simple attributes 2. Weak entities and their simple attributes 3. 1-M relationships (and their attribute) 4. 1-1 relationships (and their attributes) 5. M-N relationships (and their attributes) 6. Composite attributes 7. Multivalued attributes 13 ER to Schemas: 1 Strong Entity Types • For each strong entity type, create a relation (table) with: • A column for each simple attribute • composite attributes - broken into several columns • A primary key – one or more of the candidate key attributes name NINumber DoB House Street City EMPLOYEE address EmployeeName DoB Ni# Address House Street City Good Practice: Use the name of the composite attribute as a prefix for each of the component names Step 1 14 Attributes -> Columns • A column of a relation is an attribute having: • a name (indicates the role the column has in this relation) • a domain (indicates the set of values it may take) Student_ID_Number: INT, address: VARCHAR(100), dateOfBirth: DATE Step 1 15 Primary Keys Another Example: Employee (name: VARCHAR(20) ,NI_no: INT) Project (p_name: VARCHAR(20), P_ID: INT) • a particular staff record can be identified as: the record in the Employee table where NI_No= 9912345 • a particular project record can be identified as: the record in the Project table where P_ID= 125 • all of the record’s other data will be accessed via these ‘keys’ • i.e. given a key value, we can determine everything else about the corresponding record Step 1 16 Examples of Primary Keys? • Student Id • Staff number • National Insurance Number/Social Security Number • Course Id • First Name and Last Name? • FlightNumber and FlightDate • Bank Sort Code and Account Number • Primary keys can consist of a single attribute or multiple attributes in combination • Called a composite key Step 1 17 Movies ER Diagram Stars Movies Studios Title Type Address Release Length Owns Name Contracts Has Sequel Salary Year 1 M 1M 1 M 1 M bonus M N NameAddress Acts In 18 Movies ER Diagram Stars Movies Studios Title Type Address Release Length Owns Name Contracts Has Sequel Salary Year 1 M 1M 1 M 1 M bonus M N NameAddress Acts In 19 Release: must have Stars Stars: must be contracted to a studio We use double diamond for the “identifying relationship of the weak entity” Release: Weak entity, total participation in relationship with Movies. Movies also have to be released Movies have to be made by studios Relations - Entities • Movie(Title, Type) • Stars(Name, Address) • Studio(Name, Address) 20 What about Release? Step 2 The Relational Model • A Movie has a Release • In the relational database • How does each member of the Release entity set know which Movie they are related to? ØThis is done via KEYS ØPrimary ØForeign: references to the primary key of another table Step 2 21 Weak Entities Mapping • Create primary key for a weak entity type from • primary key attributes of the identifying relationship types • partial keys of the weak entity • Rule: For each weak entity Ø create a new relation schema Ø for each identifying relationship: add the key attributes of the related entity to the new schema as foreign key attributes Ø declare the composite primary key of the schema Ø add the simple attributes 22 Step 2 Relations, Relationships • Movie(Title, Type) • Release(Title, Year, Length) • Stars(Name, Address) • Studio(Name, Address) Movies Title Type Release Length Has Year 1 M 23 Title is a Foreign key Step 2 24 Foreign Keys: Definition • The foreign key is used to cross-reference between tables • Definition: A foreign key is an attribute (or set of attributes) that exist in one or more tables and which is the primary key for one of those tables. • The foreign key restricts the domain of the attribute • A value in a foreign key MUST exist in the referenced primary key attribute Title Type 42nd Street Musical Miracle on 34th Street Chrismas Movies Title Year Length Snake Pit 1948 108 Release Violation of Foreign Key constraint Step 2Using Foreign Keys • A foreign key is a referential constraint between two tables, i.e. a value in a foreign key MUST exist in the referenced primary key • A table may have multiple foreign keys and each foreign key can reference a different table • Foreign keys need not have the same attribute name across tables • Could have been Release(MovieTitle, Year, Length) • Names should differ to help readability! • The MUST have the same data type • Foreign keys are important in modelling weak entities and relationships. Step 2 25 Foreign Keys • There are only two ways of connecting two related pieces of data in a relational database • 1. They are in the same tuple (row) of the same table, i.e. with the same primary key value Ø “Jane” and “Jones” are connected since they are in the same record • 2. They are in tuples which are connected by a foreign key or a chain of foreign keys Ø “Jones” and “Cooper” are connected by the foreign key, adviser Student Advi sesStaff “John Cooper advises Jane Jones” 26 Step 2 Stars Movies Studios Title Type Address Release Length Owns Name Contracts Has Sequel Salary Year 1 M 1M 1 M 1 M bonus M N NameAddress Acts In 27 Back to the ER Diagram: Relations - Entities Back to the ER Diagram: Relations - Entities What do we have thus far? • Movie(Title : VARCHAR(50), Type : VARCHAR(20)) • Release(Title : VARCHAR(50), Year : INT, Length : INT) • Stars(Name : VARCHAR(50), Address : VARCHAR(50)) • Studio(Name : VARCHAR(50), Address : VARCHAR(50)) Notes: • each table has primary key attribute(s) • Release's Title is a foreign key reference to Movie's Title 28 Step 2Relationships: 1-to-many • Movie(Title, Type) • Release(Title, Year, Length) • Stars(Name, Address) • Studio(Name, Address) Stars Studios AddressName Contracts Salary 1 M NameAddress 1-to-many rule: the primary key on the ‘one side’ of the relationship is added to the ‘many side’ as a foreign key. Step 3 • Movie(Title, Type) • Release(Title, Year, Length) • Stars(Name, Address, Studio, Salary) • Studio(Name, Address) Stars Studios AddressName Contracts Salary 1 M NameAddress 1-to-many rule: the primary key on the ‘one side’ of the relationship is added to the ‘many side’ as a foreign key. Foreign key Step 3Relationships: 1-to-many • Movie(Title, Type) • Release(Title, Year, Length) • Stars(Name, Address, Studio, Salary) • Studio(Name, Address) Movies Studios Type Address Owns Name 1M 31 Step 3Relationships: 1-to-many • Movie(Title, Type, Studio) • Release(Title, Year, Length) • Stars(Name, Address, Studio, Salary) • Studio(Name, Address) Movies Studios Type Address Owns Name 1M 32 Step 3Relationships: 1-to-many • Movie(Title, Type, Studio) • Release(Title, Year, Length) • Stars(Name, Address, Studio, Salary) • Studio(Name, Address) Movies Title Type Sequel M 1 33PrequelOf SequelOf Step 3Relationships: 1-to-many • Movie(Title, Type, Studio, SequelOf) • Release(Title, Year, Length) • Stars(Name, Address, Studio, Salary) • Studio(Name, Address) 34 Movies Title Type Sequel M 1 PrequelOf SequelOf Step 3Relationships: 1-to-manyOne-to-one relationships (and their attributes) • The foreign key attributes may be added to either schema • Rule 1-1: For each one-to-one relationship type between two entity types, choose one entity type to be the subject and one to be the target type • add the key attributes of the subject class to the target schema as foreign key attributes • add the attributes of the relationship to the target schema Step 4 35 Step 4 36 1 Staff lastName staffIdfirstName 1 School Name Manages Under Rule 1-1, what is the best choice for “subject” and “target”? • Staff(staffId, firstName,lastName) • School(Name, headOfSchoolStaffId) “If the relationship is mandatory for one entity but not the other, the put foreign key into the table for which participation is mandatory” Set this to be “NOT NULL” Target Subject Relationships: many-to-many • Movie(Title, Type, Studio, SequelOf) • Release(Title, Year, Length) • Stars(Name, Address, Studio , Salary) • Studio(Name, Address) Many-to-Many Rule: • A new relation is produced which contains the primary keys from both sides of the relationship as foreign keys • These attributes form a composite primary key for the relation StarsRelease Length Year bonus M N NameAddress Acts In 37 Step 5Relationships: many-to-many • Movie(Title, Type, Studio, SequelOf) • Release(Title, Year, Length) • Stars(Name, Address, Studio , Salary) • Studio(Name, Address) • ActsIn(Title,Year,StarName, bonus) Many-to-Many Rule: • A new relation is produced which contains the primary keys from both sides of the relationship as foreign keys • These attributes form a composite primary key for the relation StarsRelease Length Year bonus M N NameAddress Acts In Step 5Subtypes & Supertype • Not really part of the main relational model, and not directly supported by most standard relational DBMS • You cannot directly map to a relational schema. Two choices: • Model the supertype and all its subtypes as a single table (and leave attributes null if they don’t apply), OR • Turn each subtype into its own table and set up 1:1 relationships between them and the super entity type. 39 Savings Account Loans Account Account d • Account(ID, Customer, Balance) • Savings(AccountID, MinimumBalance) • Loans(AccountID, OverDraftLimit) CustomerId Id Balance Overdraft Limit Minimum Balance Customer lastName address contactIdfirstName zipcodestatecitystreet Create an attribute in the relation schema for each component attribute Use the name of the composite attribute as a prefix for each of the component names Composite attributes 40 Customer(contactId,… , address_street, address_city, address_state, address_zipcode) Step 6 Customer lastName address contactIdfirstName zipcodestatecitystreet hobbies Represent each multi-valued attribute as if it were a weak entity class Multi-valued attributes 41 Difficult to search for a particular hobby Step 7 1 Customer lastName contactIdfirstName M Hobbies hobby has 42 Has Step 7Summary: ER -> Relations • Strong entities • build a table with columns for each attribute • Weak entities • build a table with columns for each attribute • Add the PK of the owner entity • Relationships • 1-N: N side • N-M: new relation • 1-1: any side  Sub-types 1. Collapse to large supertype relation, OR 2. Compose as 1-to-1 relationships [Step 1] [Step 2] [Steps 3-5] Schemas with Domains • Movie(Title, Type, Studio, SequelOf) • Release(Title, Year, Length) • Stars(Name, Address, Studio, Salary) • Studio(Name, Address) • ActsIn(Title, Year, StarName, bonus) VARCHAR(xx) INT BIT 44 Schemas with Domains • Movie(Title, Type, Studio, SequelOf) • Release(Title, Year, Length) • Stars(Name, Address, Studio, Salary) • Studio(Name, Address) • ActsIn(Title, Year, StarName, bonus) VARCHAR(xx) INT BIT 45 Schemas with Domains 46  Movie(Title : VARCHAR(50), Type : VARCHAR(50), Studio : VARCHAR(50), SequelOf : VARCHAR(50))  Release(Title : VARCHAR(50), Year : Int, Length: Int)  Stars(Name : VARCHAR(50), Address : VARCHAR(100), Studio VARCHAR(50), Salary : Int)  Studio(Name : VARCHAR(50), Address : VARCHAR(100))  ActsIn(Title : VARCHAR(50), Year : Int, StarName : VARCHAR(50), bonus : Int) Some Tips! • Follow the stepwise guide – it works! • Write a schema first – then go to the DBMS to build the tables • Add the entities OWN attributes – then decide what FKs to add • Be careful to select good data types – they must match when you go to connect PKs and FKs","libVersion":"0.3.2","langs":""}