{"path":"software engineering/year 2/semester 1/Practical Algorithms/Slides/8. Formal Reasoning/Propositional Logic.pdf","text":"Propositional Logic Dr. Waqar Nabi (with thanks to Dr Gethin Norman) School of Computing Science University of Glasgow The Crux: Logic and Proofs • Logic formally specifies the meaning of STATEMENTS • It is the basis of • all MATHEMATICAL reasoning • all AUTOMATED reasoning • which is why you are studying it! • Proofs are CORRECT MATHEMATICAL ARGUMENTS • Important in Mathematics (Obviously) • Important in Computer Science as well! • Proof that programs produce the correct output for all possible input • Show that Algorithms always produce the correct result • Establish security of a computer system • Foundation of Automata Theory and Theoretical Computer Science • Compiler Construction • Create AI Explore! https://www.bbc.co.uk/programmes/b00vcqcx Logic In Our Time Melvyn Bragg and his guests discuss the history of logic, the study of reasoning and argument. Propositional Logic Logic • Logic is the basis of all mathematical reasoning • It is more fundamental than mathematics • The rules of logic give precise meaning to statements • Provides a methodology for objectively reasoning about the truth or falsity of such statements • It is the foundation for expressing formal proofs in all branches of mathematics and computing. Logic • Logic is studied, expressed and used under the umbrella of “logical systems” • You can think of them as “Paradigms” • All systems use a specific FIXED, FORMAL LANGUAGE • Two of the most widely studied are: • Propositional Logic (This topic) • First-Order Logic (also known as “Predicate Logic” – Next one) Propositional logic Propositional Logic is the: logic of compound statements built from simpler statements using Boolean connectives Some applications in computing science • design of digital electronic circuits • expressing conditions in programs • queries to databases and search engines Propositional logic Propositional Logic is the: logic of compound statements built from simpler statements using Boolean connectives Some applications in computing science • design of digital electronic circuits • expressing conditions in programs • queries to databases and search engines So: we’ve been using propositional logic already for a while now. We are now revisiting it and re- building it from the ground up, much more rigorously and formally, which will let us tackle more complex problems and advanced topics which build on top of this foundation. Explore! • Boolean Logic & Logic Gates: Crash Course Computer Science #3 • Discusses logic in context of computer hardware (which you were concerned in the course CANS), but still a good introduction to the basic operations • https://www.youtube.com/watch?v=gI-qXk7XojA • The longer watch: The Genius of George Boole • https://www.youtube.com/watch?v=Hljir_TyTEw Outline Propositions Connectives Tautologies and contradictions Logical equivalence PROPOSITIONS https://www.flickr.com/photos/x1brett/2279939232/ Propositions Propositions are the basic building blocks of logic • declarative sentences, that are either true or false (but not both) Examples: a)Glasgow is a city in Scotland b) 1+1 = 2 c) 2+2 = 3 d)every day is Friday • a) and b) are true while c) and d) are false The area of logic that deals with propositions is called propositional logic or propositional calculus Propositions The following are not propositions: a) what’s is the weather like? b) Drink tea c) x+1 = 2 d) x+y = z a) & b) are not declarative sentences and are neither true nor false c) & d) have unassigned variables, and are neither true or false • can be true or false depending on the values the variables are assigned Exercise • Which of the following are Propositions 1. It is always sunny in Philadelphia 2. Surely, you must be joking? 3. Can you please keep quiet. 4. Socrates is a man. 5. x = 4 6. x * x = x2 Exercise • Which of the following are Propositions 1. It is always sunny in Philadelphia. (Proposition) 2. Surely, you must be joking? (This is a question/exclamation, not a declaration. It has no “truth value”) 3. Can you please keep quiet. (This is a command, not a declaration. It has no “truth value”) 4. Socrates is a man. (Proposition) 5. x = 4 (May or may not be true, depending on value of x) 6. x * x = x2 (Proposition) Notation Truth value of a proposition is either: • true or alternatively written 1 or T • false or alternatively written 0 or F Lower case letters usually used to represent propositions • typically use the letters p, q, r, …. Examples: • let p be the proposition “today is Friday” • let q be the proposition “it is raining” Upper case letters usually used to represent combination of propositions (formulae) - more on this later CONNECTIVESOutline Propositions Connectives Tautologies and contradictions Logical equivalence Connectives; Natural Language vs Formal Logic • Natural languages have “Connectives”; words that connect phrases together in a grammatically correct manner. • https://www.theschoolrun.com/what-are-connectives • We are more interested in “Logical Connectives”; similar to natural language connectives but more precise, and formal. Connectives Used to generate new mathematical statements by combining one or more propositions Generated statements are called compound propositions or formulae We use capital letters to denote such statements • typically use the letters P, Q, R, … We will use truth tables which display the relationship between the truth value of a formula and the truth values of the propositions (and subformulae) within it Connectives - Negation Examples: • let p be the proposition “today is Friday” • then ¬p is the proposition “it is not the case that today is Friday” or better “it is not Friday” • let q be the proposition “it is raining” • then ¬q is the proposition “it is not the case that it is raining” or better “it is not raining” Truth table for ¬p: p ¬p p ¬p or equivalently This Photo by Unknown Author is licensed under CC BY-NC-ND Connectives - Negation Examples: • let p be the proposition “today is Friday” • then ¬p is the proposition “it is not the case that today is Friday” or better “it is not Friday” • let q be the proposition “it is raining” • then ¬q is the proposition “it is not the case that it is raining” or better “it is not raining” Truth table for ¬p: p ¬p false true true false p ¬p 0 1 1 0 or equivalently This Photo by Unknown Author is licensed under CC BY-NC-ND Connectives – Conjunction (AND)Connectives – Conjunction (AND) Example: − let p be the proposition “today is Friday” − let q be the proposition “it is raining” − then p∧q (“p and q”) is the proposition “today is Friday and it is raining” Truth table p∧q: p q p∧q Note: in the first two columns count up in binary as we move down the rows Connectives – Conjunction (AND) Example: − let p be the proposition “today is Friday” − let q be the proposition “it is raining” − then p∧q (“p and q”) is the proposition “today is Friday and it is raining” Truth table p∧q: p q p∧q 0 0 0 0 1 0 1 0 0 1 1 1 Note: in the first two columns count up in binary as we move down the rows Connectives – Disjunction (OR) If you’re out shopping, you want to have: a card, OR cash, OR both Connectives – Disjunction (OR) Example: − let p be the proposition “I have cash” − let q be the proposition “I have credit card” − then p∨q (“p or q”) is the proposition “I have cash, or credir card (or both)” Truth table for p∨q: Note, this disjunction operation is: Either p, OR q, OR BOTH p q p∨q https://www.flickr.com/photos/68751915@N05/6280507539 Connectives – Disjunction (OR) Example: − let p be the proposition “I have cash” − let q be the proposition “I have credit card” − then p∨q (“p or q”) is the proposition “I have cash, or credir card (or both)” Truth table for p∨q: Note, this disjunction operation is: Either p, OR q, OR BOTH p q p∨q 0 0 0 0 1 1 1 0 1 1 1 1 Connectives – Disjunction (OR) Example: − let p be the proposition “I have access to network over WiFi” − let q be the proposition “I have access to network over Ethernet” − then p∨q (“p or q”) is the proposition “I have access to network over WiFI, or I have access to network over Ethernet, or both” Truth table for p∨q: Note, this disjunction operation is: Either p, OR q, OR BOTH p q p∨q 0 0 0 0 1 1 1 0 1 1 1 1 This Photo by Unknown Author is licensed under CC BY-NC-ND Side note: Why we need humans in the loop This compound statement is logically correct: The charge on an electron is negative OR Waqar is an amphibious shape-shifting alien. Connectives – Exclusive Or http://atom.smasher.org/http://atom.smasher.org/ Connectives – Exclusive Or Example: − let p be the proposition “the user is asked for pin” − let q be the proposition “the user is asked for password” − then p⊕q (“p xor q”) is the proposition “either user is asked for pin or user is asked for password, but not both” Truth table for p⊕q: p q p⊕q Connectives – Exclusive Or Example: − let p be the proposition “the user is asked for pin” − let q be the proposition “the user is asked for password” − then p⊕q (“p xor q”) is the proposition “either user is asked for pin or user is asked for password, but not both” Truth table for p⊕q: p q p⊕q 0 0 0 0 1 1 1 0 1 1 1 0 Connectives – Exclusive Or Another example: − p: “I passed the PA assessed exercise” − q: “I failed the PA assessed exercise” Either I passed or failed the PA assessed exercise But I cannot both pass and fail the exercise − so exclusive or rather than disjunction English is often imprecise… p q p⊕q 0 0 0 0 1 1 1 0 1 1 1 0 p q p∨q 0 0 0 0 1 1 1 0 1 1 1 1 Ah, nostalgia! Computers work in binary (0 and 1’s) and all computation a computer performs (on a chip) reduces to the operations − negation or NOT gate − conjunction or AND gate − disjunction or OR gate − exclusive-or or XOR gate − and their inverted versions So any program you write in Java, C, Python… when compiled, it is reduced to these operations on bits… This Photo by Unknown Author is licensed under CC BY-SA Connectives – Implication https://www.flickr.com/photos/environmental_illness_network/8611065695 Connectives – Implication Example: − let p be the proposition “three incorrect pins entered” − let q be the proposition “account is frozen” − then p➝q (“p implies q”) is the proposition “if three incorrect pins entered, then account is frozen” Truth table for p➝q: p q p➝q think of p➝q as a contract Connectives – Implication Example: − let p be the proposition “three incorrect pins entered” − let q be the proposition “account is frozen” − then p➝q (“p implies q”) is the proposition “if three incorrect pins entered, then account is frozen” Truth table for p➝q: p q p➝q think of p➝q as a contract Vacuous: not expressing or showing intelligent thought or purpose Connectives – Implication All of the following are equivalent to p➝q − “p implies q” − “if p, then q” − “if p, q” − “q whenever p” − “p is sufficient for q” − “q is necessary for p” − … see Rosen for more discussion on this.. p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 think of p➝q as a contract Side note: Why we need humans in the loop The following implication is logically correct IF the charge on an electron is positive THEN Waqar is an amphibious shape-shifting alien. It is “vacuously” true; the first proposition – the condition – is always false, so whatever it implies, the implication stands true. Maybe easier to think of it this way: the implication is not false. The “contract” is not violated, even if the second proposition is impossible*). *one hopes Connectives – Implication; Example Think of p➝q as a contract − the contract holds, or it does not If it is sunny, then you will take me to the beach − p: it is sunny − q: you will take me to the beach p q p➝q what does this mean? This Photo by Unknown Author is licensed under CC BY-SA Connectives – Implication; Example Think of p➝q as a contract − the contract holds, or it does not If it is sunny, then you will take me to the beach − p: it is sunny − q: you will take me to the beach p q p➝q what does this mean? 0 0 1 it was not sunny and you did not take me to the beach (no problem) 0 1 1 it was not sunny and you did take me to the beach (a bonus) 1 0 0 it was sunny and you did not take me to the beach (contract broken) 1 1 1 it was sunny and you took me to the beach (good) This Photo by Unknown Author is licensed under CC BY-SA Connectives – Implication: Another Example Think of p➝q as a contract − the contract holds, or it does not The computer boots if correct password is entered − written another way: if correct password entered, then computer boots − p: correct password entered − q: computer boots p q p➝q what does this mean? Connectives – Implication: Another Example Think of p➝q as a contract − the contract holds, or it does not The computer boots if correct password is entered − written another way: if correct password entered, then computer boots − p: correct password entered − q: computer boots p q p➝q what does this mean? 0 0 1 if correct password not entered, computer does not boot (good news) 0 1 1 if correct password not entered, computer boots (implication logically true!, but this is obviously not good; this is an indication that an implication is not the logical connection or “contract” we are looking for here) 1 0 0 correct password but computer does not boot (contract broken) 1 1 1 correct password and computer boots (yay!) Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, − then it has letter B on the other What cards must be turned over to confirm that the rule holds? B 7 C 3 Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, − then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1B 7 C 3 Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, − then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1B 7 C 3 Hint: If the implication is true, WHATEVER is on the other side, then no point turning that card. Only turn those cards where the implication is true for one case, and false for another. Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 Do we need to turn over this (red) card? Connectives – Implication We are given 4 cards − cards have a letter on one side and number on the other side and have the following rule: − if a card has number 3 on one side, then it has letter B on the other What cards must be turned over to confirm that the rule holds? − p: card has the number 3 on one side − q: card has a B on the other side − p➝q p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 B 7 C 3 We only need to turn these (red) cards over Connectives - Continued • We have looked at: − Negation ¬p − Conjunction (AND) p∧q − Disjunction (OR) p∨q − Exclusive-OR p⊕q − Implication: p ➝ q • We are now going to look at some ways we can modify the implication p ➝ q, and see how that compares to the original implication Connectives – Implication; Modifications Given the imlication p➝q; it can be modified in three different ways to give these variations: − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Connectives – Implication; Modifications Given the implication p➝q; it can be modified in three different ways to give these variations: − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q LOGICAL EQUIVALENCE In the world of formal logic, if two statements are logically equivalent, that means they are effectively saying the exact same thing, only in different ways. In other words, you could say that the “information content” of two logically equivalent statements is exactly the same. If you were to create truth table of two logically equivalent statements, it would be IDENTICAL. More on this later. Connectives – Implication; Modifications Other implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Converse: p q p➝q q➝p 0 0 0 1 1 0 1 1 Establishing the equivalence (or its absence) formally by comparing the TRUTH TABLES p➝q converse: q➝p Connectives – Implication; Modifications Other implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Converse: p q p➝q q➝p 0 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 notice that they are different p➝q converse: q➝p Establishing the equivalence (or its absence) formally by comparing the TRUTH TABLES Connectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Converse example: − p: it is sunny − q: you will take me to the beach − p➝q if it is sunny, then you will take me to the beach • can still go to the beach when it is not sunny • that is, it is not equivalent to its converse, q➝p (if you take me to the beeach →it is sunny) − q➝p if you take me to the beach, then it is sunny • can be sunny and not go to the beach, so does not imply p➝q p➝q converse: q➝p Connectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Contrapositive: p q p➝q ¬q ¬p ¬q➝¬p 0 0 0 1 1 0 1 1 p➝q contrapositive: ¬q➝¬p Establishing the equivalence (or its absence) formally by comparing the TRUTH TABLES Connectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Contrapositive: p q p➝q ¬q ¬p ¬q➝¬p 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 0 1 1 1 0 0 1 p➝q contrapositive: ¬q➝¬p Establishing the equivalence (or its absence) formally by comparing the TRUTH TABLES Implication p➝q and its Contrapositive implication: ¬q➝¬p are LOGICALLY EQUIVALENT Connectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Contrapositive example: − p: it is sunny − q: you will take me to the beach − p➝q if it is sunny, then you will take me to the beach − ¬q➝¬p if you do not take me to the beach, then it is not sunny these are equivalent (as we have seen from the truth table) p➝q contrapositive: ¬q➝¬p Implication p➝q and its Contrapositive implication: ¬q➝¬p are LOGICALLY EQUIVALENT Connectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q The inverse is actually the contrapositive of the converse − so the converse and inverse are equivalent p➝q inverse: ¬p➝¬qConnectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Inverse: p q q➝p ¬p ¬q ¬p➝¬q 0 0 0 1 1 0 1 1 but the same as the converse p➝q inverse: ¬p➝¬qConnectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Inverse: p q q➝p ¬p ¬q ¬p➝¬q 0 0 1 1 1 1 0 1 0 1 0 0 1 0 1 0 1 1 1 1 1 0 0 1 p➝q inverse: ¬p➝¬q Implication p➝q’s converse: q➝p and inverse: ¬p➝¬q are LOGICALLY EQUIVALENT Connectives – Implication; Modifications Relational implications that can be formed from p➝q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Inverse example: − p: it is sunny − q: you will take me to the beach − p➝q if it is sunny, then you will take me to the beach • can go to the beach when it is not sunny − ¬p➝¬q if it is not sunny, you will not take me to the beach • can be sunny and still not go to the beach, so not the same as p → q − q➝p if you take me to the beach, then it is sunny: This is saying thge same thing as ¬p➝¬q p➝q inverse: ¬p➝¬qConnectives – Implication; Modifications Given the imlication p➝q; it can be modified in three different ways to give these variations: − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q Connectives – Biconditional https://upload.wikimedia.org/wikipedia/commons/e/e0/Junior_certificate_grading.png https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Singapore_road_sign_-_Informatory_-_Directional_arrow_-_Both_ways.svg/500px-Singapore_road_sign_-_Informatory_-_Directional_arrow_-_Both_ways.svg.png Connectives – Implication Example Think of p➝q as a contract − the contract holds, or it does not The computer boots if correct password is entered − written another way: if correct password entered, then computer boots − p: correct password entered − q: computer boots p q p➝q what does this mean? 0 0 1 if correct password not entered, computer does not boot (good news) 0 1 1 if correct password not entered, computer boots (implication logically true!, but this is obviously not good; this is an indication that an implication is not the logical connection or “contract” we are looking for here) 1 0 0 correct password but computer does not boot (contract broken) 1 1 1 correct password and computer boots (yay!) We had noted earlier that the use of implication was not correct here; it did not create the right kind of “contract” Connectives – Biconditional – If and only if Think of p q as a contract − the contract holds, or it does not The computer boots if and only if correct password is entered − p: correct password entered − q: computer boots p q p q what does this mean? 0 0 1 if correct password not entered, computer does not boot (good news) 0 1 0 if correct password not entered, computer boots (contract broken) 1 0 0 correct password but computer does not boot (contract broken) 1 1 1 correct password and computer boots (yay!) Connectives – Biconditional – If and only if https://upload.wikimedia.org/wikipedia/commons/e/e0/Junior_certificate_grading.png https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Singapore_road_sign_-_Informatory_-_Directional_arrow_-_Both_ways.svg/500px-Singapore_road_sign_-_Informatory_-_Directional_arrow_-_Both_ways.svg.png You pass, IF, and ONLY IF, you get greater then 40% marks So: if you pass → you got more than 40% marks if you get more than 40% marks → you pass i.e. you pass ⟷ you get more than 40% marks Another example... Connectives – Biconditional Example: − let p be the proposition “you passed” − let q be the proposition “you got more than 40% marks” − then p⟷q (“p if and only if q”) is the proposition “you passed if and only if you got more than 40% marks” Truth table for p⟷q: p q p⟷q Connectives – Biconditional Example: − let p be the proposition “you passed” − let q be the proposition “you got more than 40% marks” − then p⟷q (“p if and only if q”) is the proposition “you passed if and only if you got more than 40% marks” Truth table for p⟷q: p q p⟷q 0 0 1 0 1 0 1 0 0 1 1 1 for p⟷q to hold either both p and q are true or both are false Connectives - Precedence https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Curly_Brackets.svg/500px-Curly_Brackets.svg.png Connectives - Precedence We can construct compound propositions from propositions using the connectives we have introduced − we use parentheses to specify the order the connectives are applied − important as this order will change the truth values of statements Example: − if (p∨q)∧r is true − if p∨(q∧r) is true https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Curly_Brackets.svg/500px-Curly_Brackets.svg.png Connectives - Precedence We can construct compound propositions from propositions using the connectives we have introduced − we use parentheses to specify the order the connectives are applied − important as this order will change the truth values of statements Example: − if (p∨q)∧r is true, then r and either p or q must be true • (either p or q) and r − if p∨(q∧r) is true, then either p or both q and r must be true • either p or (q and r) https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Curly_Brackets.svg/500px-Curly_Brackets.svg.png Connectives - Precedence − if (p∨q)∧r is true, then r and either p or q must be true − if p∨(q∧r) is true, then either p or both q and r must be true p q r p∨q (p∨q)∧r q∧r p∨(q∧r) Connectives - Precedence − if (p∨q)∧r is true, then r and either p or q must be true − if p∨(q∧r) is true, then either p or both q and r must be true p q r p∨q (p∨q)∧r q∧r p∨(q∧r) 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 Connectives - Precedence To reduce the number of parenthesis we assume negation is applied before all other operators − negation has the highest precedence − ¬p∧r is the same as (¬p)∧r and does not mean ¬(p∧r) As a general rule ∧ has the next highest precedence, followed by ∨, then ➝ and finally ⟷ − however, to avoid ambiguity and confusion I will use parenthesis between these operators When in doubt use parenthesis − will avoid both errors and confusion Connectives - Review • Negation ¬p • Conjunction (AND) p∧q • Disjunction (OR) p∨q • Exclusive-OR p⊕q • Implication: p ➝ q − converse: q➝p − contrapositive: ¬q➝¬p − inverse: ¬p➝¬q • Biconditional p ⟷ q Tautologies and Contradictions https://xkcd.com/703/ Outline Propositions Connectives Tautologies and contradictions Logical equivalence Tautologies and Contradictions A tautology is a formula that is always true − classic examples: p➝p (if p, then p) and p∨¬p (either p or not p) A contradiction is a formula that is always false − classic examples: • p➝¬p (if p, then not p) • p∧¬p (p, and not p) https://www.gocomics.com/calvinandhobbes/2015/02/13/ Contingency A tautology is a formula that is always true − classic examples: p➝p (if p, then p) and p∨¬p (either p or not p) A contradiction is a formula that is always false − classic example: p∧¬p (p, and not p) If a formula is NEITHER a tautology, NOR a contradiction, then it is a CONTINGENCY − examples: p➝q, p∨q and p∧q Satisfiable Formulas • If there is at least one assignment of truth values to its variables that makes it true. − Tautologies are (obviously) satisfiable • they are ALWAYS true − Contingencies are satisfiable: • there will be some (at least) one case which makes it true • i.e. at least one row in the truth table will be true − Contradictions are NOT satisfiable • Never true Tautologies Contingencies Contradictions Satisfiable formulas LOGICAL EQUIVALENCE Outline Propositions Connectives Tautologies and contradictions Logical equivalence − introduction − laws of logical equivalence − examples Logical equivalence Two syntactically (i.e. textually) different compound propositions (formulae) may be semantically identical (i.e. have the same meaning) − it such cases they are called logically equivalent The statement P ≡ Q expresses that P is logically equivalent to Q − given any assignment to the propositions appearing in P and Q, the truth values of P and Q are the same ≡We have come across logical equivalence alreadyLogical equivalence To show two compound propositions are not logically equivalent − need to give one assignment to the propositions that makes one of the formulae true and the other formula false • notice do not need to give the full truth table, just one row is enough to show non-equivalence • Example: (p∨q)∧r ≢ p∨(q∧r) are not logically equivalent ≢Logical equivalence • Consider what is required to show non-equivalence − Just one “counter example” is enough. • This means, to prove equivalence, we must be able to show that the two formulaes have the same truth value for ALL POSSIBLE COMBINATIONS OF INPUT PROPOSITIONS p ¬p ¬(¬p) Logical equivalence • Consider what is required to show non-equivalence − Just one “counter example” is enough. • This means, to prove equivalence, we must be able to show that the two formulaes have the same truth value for ALL POSSIBLE COMBINATIONS OF INPUT PROPOSITIONS • E.g.: p ≡ ¬(¬p) p ¬p ¬(¬p) 0 1 0 1 0 1 Logical Equivalence How can we PROVE equivalence Logical equivalence can be proved by: − by laws of logical equivalence (this sub-topic) − by a truth table (i.e. show truth table columns are the same) • number of rows of a truth table is 2n where n is number of propositions − by some other line of reasoning Outline Propositions Connectives Tautologies and contradictions Logical equivalence − introduction − laws of logical equivalence − examples Laws of logical equivalence These are similar to the arithmetic identities such as: − x⋅0 = 0 − x⋅1 = x − x + y = y + x − x⋅(y + z) = x⋅y + x⋅z − x + (y + z) = (x + y) + z The identities hold for all possible values of x, y and z In the world of propositional logic, instead of equality (=) we use logical equivalence (≡) , and apply it to compound proposition (formulae) − provides a pattern or template that can be used to match all or part of a much more complicated proposition and to find an equivalence for it • examples to come − can replace pattern on either side of the law with that on the other Laws – Identity & DominationLaws – Identity Identity laws: − P ∧ true ≡ P − P ∨ false ≡ P i.e. TRUE is the identify for CONJUNCTION FALSE is the identity for DISJUNCTION P true P ∧ true P false P ∨ false Arithmetic equivalent: x * 1 = x x + 0 = x Laws – Identity Identity laws: − P ∧ true ≡ P − P ∨ false ≡ P i.e. TRUE is the identify for CONJUNCTION FALSE is the identity for DISJUNCTION P true P ∧ true 0 1 0 1 1 1 P false P ∨ false 0 0 0 1 0 1 Arithmetic equivalent: x * 1 = x x + 0 = x Laws – Domination Domination laws: − P ∨ true ≡ true − P ∧ false ≡ false P true P ∨ true P false P ∧ false Arithmetic equivalent: x * 0 = 0 No such law for addition though Laws – Domination Domination laws: − P ∨ true ≡ true − P ∧ false ≡ false P true P ∨ true 0 1 1 1 1 1 P false P ∧ false 0 0 0 1 0 0 Arithmetic equivalent: x * 0 = 0 No such law for addition though Laws – Identity & domination Identity laws: − P ∧ true ≡ P − P ∨ false ≡ P Domination laws: − P ∨ true ≡ true − P ∧ false ≡ false Notice P is (i.e. can be) a compound proposition so example applications are − ((p∨q)∧r) ∧ true ≡ ((p∨q)∧r) identity law − ((p∨q)∧r) ≡ ((p∨q)∧r) ∧ true identity law Works both ways around (do not necessarily have to go from lhs of law to rhs) Laws – Identity & domination Identity laws: − P ∧ true ≡ P − P ∨ false ≡ P Domination laws: − P ∨ true ≡ true − P ∧ false ≡ false Can also apply to subexpressions, e.g. − (P ∧ (Q ∧ true)) ≡ P∧Q identity law − (P ∧ false)➝R ≡ false➝R domination law Laws – Identity & Domination Identity laws: − P ∧ true ≡ P − P ∨ false ≡ P Domination laws: − P ∨ true ≡ true − P ∧ false ≡ false Can also apply to subexpressions, e.g. − (P ∧ (Q ∧ true)) ≡ P∧Q identity law − (P ∧ false)➝R ≡ false➝R domination law • notice removed extra parenthesis, e.g. (Q) becomes Q Laws – Idempotent & Double Negation https://pxhere.com/en/photo/1040863 Laws – Idempotent & Double Negation Idempotent laws: − P ∧ P ≡ P − P ∨ P ≡ P https://pxhere.com/en/photo/1040863 Laws – Idempotent & Double Negation Idempotent laws: − P ∧ P ≡ P − P ∨ P ≡ P Double negation law: − ¬(¬P) ≡ P https://pxhere.com/en/photo/1040863 Laws – Commutative and AssociativeLaws – Commutative and Associative Commutative laws: − P ∧ Q ≡ Q ∧ P − P ∨ Q ≡ Q ∨ P • similarly to expressing addition/multiplication, e.g. a+b = b+a Associative laws: − (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R) − (P ∨ Q) ∨ R ≡ P ∨ (Q ∨ R) From the associative laws − can write (P∧Q)∧R or P∧(Q∧R) as P∧Q∧R without ambiguity − similarly to expressing addition/multiplication, e.g. a+b+c Laws – Commutative and Associative Commutative laws: − P ∧ Q ≡ Q ∧ P − P ∨ Q ≡ Q ∨ P • similarly to expressing addition/multiplication, e.g. a+b = b+a Associative laws: − (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R) − (P ∨ Q) ∨ R ≡ P ∨ (Q ∨ R) From the associative laws − can write (P∧Q)∧R or P∧(Q∧R) as P∧Q∧R without ambiguity − or in general express the conjunction of multiple propositions as P1 ∧ P2 ∧ … ∧ Pn − we express multiple disjunctions in the same way • similarly to expressing addition/multiplication, e.g. a+b+c Laws – Distributive https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Illustration_of_distributive_property_with_rectangles.svg/640px-Illustration_of_distributive_property_with_rectangles.svg.png Laws – Distributive Distributive laws: − P ∨ (Q ∧ R) ≡ (P ∨ Q) ∧ (P ∨ R) − P ∧ (Q ∨ R) ≡ (P ∧ Q) ∨ (P ∧ R) Consider when (P ∨ Q) ∧ (P ∨ R) is true − i.e. when (P or Q) and (P or R) holds − if P holds, then we are good (since both sides of the “and” hold) − if P does not hold, then BOTH Q and R must hold for the formula to be true − so… P or (Q and R) Laws – Distributive Distributive laws: − P ∨ (Q ∧ R) ≡ (P ∨ Q) ∧ (P ∨ R) − P ∧ (Q ∨ R) ≡ (P ∧ Q) ∨ (P ∧ R) Consider when (P ∧ Q) ∨ (P ∧ R) is true − i.e. when (P and Q) or (P and R) holds − P must hold for either side to hold − and we need one side to hold, i.e. Q or R − so… P and (Q or R) Laws – De Morgan https://www.flickr.com/photos/internetarchivebookimages/14576723757/ Laws – De Morgan De Morgan laws: − ¬(P ∧ Q) ≡ ¬P ∨ ¬Q − ¬(P ∨ Q) ≡ ¬P ∧ ¬Q Laws – De Morgan De Morgan laws: − ¬(P ∧ Q) ≡ ¬P ∨ ¬Q − ¬(P ∨ Q) ≡ ¬P ∧ ¬Q P Q P∧Q ¬(P∧Q) ¬P ¬Q ¬P∨¬Q Laws – De Morgan De Morgan laws: − ¬(P ∧ Q) ≡ ¬P ∨ ¬Q − ¬(P ∨ Q) ≡ ¬P ∧ ¬Q P Q P∧Q ¬(P∧Q) ¬P ¬Q ¬P∨¬Q 0 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 0 0 Laws – De Morgan De Morgan laws: − ¬(P ∧ Q) ≡ ¬P ∨ ¬Q − ¬(P ∨ Q) ≡ ¬P ∧ ¬Q Consider when ¬(P ∧ Q) is true − i.e. when not (P and Q) holds − one of P or Q must be false − so… (not P) or (not Q) Laws – De Morgan De Morgan laws: − ¬(P ∧ Q) ≡ ¬P ∨ ¬Q − ¬(P ∨ Q) ≡ ¬P ∧ ¬Q P Q P∨Q ¬(P∨Q) ¬P ¬Q ¬P∧¬Q Laws – De Morgan De Morgan laws: − ¬(P ∧ Q) ≡ ¬P ∨ ¬Q − ¬(P ∨ Q) ≡ ¬P ∧ ¬Q P Q P∨Q ¬(P∨Q) ¬P ¬Q ¬P∧¬Q 0 0 0 1 1 1 1 0 1 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 0 0 0 Laws – De Morgan De Morgan laws: − ¬(P ∧ Q) ≡ ¬P ∨ ¬Q − ¬(P ∨ Q) ≡ ¬P ∧ ¬Q Consider when ¬(P ∨ Q) is true − i.e not (P or Q) holds − this means neither P or Q can hold − so… (not P) and (not Q) Laws – Contradiction, Tautology & ImplicationLaws – Contradiction, tautology & implication Contradiction laws: − P ∧ ¬P ≡ false and Tautology laws: − P ∨ ¬P ≡ true Laws – Contradiction, Tautology & Implication Contradiction and tautology laws: − P ∧ ¬P ≡ false − P ∨ ¬P ≡ true Implication law: − P ➝ Q ≡ ¬P ∨ Q P Q P➝Q ¬P ¬P∨Q 0 0 1 1 1 0 1 1 1 1 1 0 0 0 0 1 1 1 0 1 Laws – Contradiction, Tautology & Implication Contradiction and tautology laws: − P ∧ ¬P ≡ false − P ∨ ¬P ≡ true Implication law: − P ➝ Q ≡ ¬P ∨ Q Equivalence LawsOutline Propositions Connectives Tautologies and contradictions Logical equivalence − introduction − laws of logical equivalence − examples Example 1 - ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q Recall negation has the highest precedence so this is equivalent to showing ¬(P∨((¬P)∧Q)) ≡ (¬P)∧(¬Q) Example 1 - ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q − we start with either the left or right hand side and apply laws of logical equivalence to derive the other side Example 1 - ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q − we start with either the left or right hand side and apply laws of logical equivalence to derive the other side ¬(P∨(¬P∧Q)) ≡ ¬((P∨¬P)∧(P∨Q)) distributive law Distributive law: P ∨ (Q ∧ R) ≡ (P ∨ Q) ∧ (P ∨ R) − note pattern matching from law set P=P, Q=¬P and R=Q Example 1 - ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q − we start with either the left or right hand side and apply laws of logical equivalence to derive the other side ¬(P∨(¬P∧Q)) ≡ ¬((P∨¬P)∧(P∨Q)) distributive law ≡ ¬(true∧(P∨Q)) tautology law Tautology law: P∨¬P ≡ true − notice have removed the extra paretheses: (true) replaced by true Example 1 - ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q − we start with either the left or right hand side and apply laws of logical equivalence to derive the other side ¬(P∨(¬P∧Q)) ≡ ¬((P∨¬P)∧(P∨Q)) distributive law ≡ ¬(true∧(P∨Q)) tautology law ≡ ¬((P∨Q)∧true) commutative law Commutative law: P ∧ Q ≡ Q ∧ P − note pattern matching again P=true and Q=P∨Q Example 1 - ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q − we start with either the left or right hand side and apply laws of logical equivalence to derive the other side ¬(P∨(¬P∧Q)) ≡ ¬((P∨¬P)∧(P∨Q)) distributive law ≡ ¬(true∧(P∨Q)) tautology law ≡ ¬((P∨Q)∧true) commutative law ≡ ¬(P∨Q) identity law Identity law: P ∧ true ≡ P − again removed extra parentheses: ¬((P∨Q)) replaced by ¬(P∨Q) Example 1 - ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q ¬(P∨(¬P∧Q)) ≡ ¬P∧¬Q − we start with either the left or right hand side and apply laws of logical equivalence to derive the other side ¬(P∨(¬P∧Q)) ≡ ¬((P∨¬P)∧(P∨Q)) distributive law ≡ ¬(true∧(P∨Q)) tautology law ≡ ¬((P∨Q)∧true) commutative law ≡ ¬(P∨Q) identity law ≡ ¬P∧¬Q De Morgan law De Morgan law: ¬(P ∨ Q) ≡ ¬P ∧ ¬Q Example 2 - (P∧Q)➝(P∨Q) ≡ true We start with either the left or right hand side and apply laws of logical equivalence to derive the other side − when showing something is equivalent to true or false easier to start with that side − otherwise hard to know where to begin • i.e. which law to apply first Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law Implication law: P➝Q ≡ ¬P∨Q Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law De Morgan law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ¬P∨(¬Q∨(P∨Q)) associative law Associative law: (P ∨ Q) ∨ R ≡ P ∨ (Q ∨ R) − pattern matching P = ¬P, Q= ¬Q and R = (P∨Q) Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ¬P∨(¬Q∨(P∨Q)) associative law ≡ ¬P∨(¬Q∨(Q∨P)) commutative law Commutative law: P ∨ Q ≡ Q ∨ P Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ¬P∨(¬Q∨(P∨Q)) associative law ≡ ¬P∨(¬Q∨(Q∨P)) commutative law ≡ ¬P∨((¬Q∨Q)∨P) associative law Associative law: (P ∨ Q) ∨ R ≡ P ∨ (Q ∨ R) Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ¬P∨(¬Q∨(P∨Q)) associative law ≡ ¬P∨(¬Q∨(Q∨P)) commutative law ≡ ¬P∨((¬Q∨Q)∨P) associative law ≡ ¬P∨(true∨P) tautology & commutative Tautology and commutative laws: ¬P∨P ≡ P∨¬P ≡ true − can apply two laws at once if not confusing Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ¬P∨(¬Q∨(P∨Q)) associative law ≡ ¬P∨(¬Q∨(Q∨P)) commutative law ≡ ¬P∨((¬Q∨Q)∨P) associative law ≡ ¬P∨(true∨P) tautology & commutative ≡ ¬P∨true domination & commutative Domination and commutative laws: true ∨ P ≡ P ∨ true ≡ true Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ¬P∨(¬Q∨(P∨Q)) associative law ≡ ¬P∨(¬Q∨(Q∨P)) commutative law ≡ ¬P∨((¬Q∨Q)∨P) associative law ≡ ¬P∨(true∨P) tautology & commutative ≡ ¬P∨true domination & commutative ≡ true domination law Domination law: P ∨ true ≡ true Example 2 - (P∧Q)➝(P∨Q) ≡ true Derivation is not necessarily unique and can often show equivalence a number of different ways − one way might require less steps − but this does not mean it is any more correct Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law Implication law: P➝Q ≡ ¬P∨Q Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law De Morgan law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ((¬P∨¬Q)∨P)∨Q associative law Associative law: (P ∨ Q) ∨ R ≡ P ∨ (Q ∨ R) − now applied the other way around − pattern matching P = (¬P∨¬Q), Q = P and R = Q Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ((¬P∨¬Q)∨P)∨Q associative law ≡ ((¬Q∨¬P)∨P)∨Q commutative law Commutative law: P ∨ Q ≡ Q ∨ P Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ((¬P∨¬Q)∨P)∨Q associative law ≡ ((¬Q∨¬P)∨P)∨Q commutative law ≡ (¬Q∨(¬P∨P))∨Q associative law Associative law: (P ∨ Q) ∨ R ≡ P ∨ (Q ∨ R) Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ((¬P∨¬Q)∨P)∨Q associative law ≡ ((¬Q∨¬P)∨P)∨Q commutative law ≡ (¬Q∨(¬P∨P))∨Q associative law ≡ (¬Q∨true)∨Q tautology & commutative Tautology and commutative laws: ¬P∨P ≡ P∨¬P ≡ true Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ((¬P∨¬Q)∨P)∨Q associative law ≡ ((¬Q∨¬P)∨P)∨Q commutative law ≡ (¬Q∨(¬P∨P))∨Q associative law ≡ (¬Q∨true)∨Q tautology & commutative ≡ true∨Q domination & commutative Domination and commutative laws: true ∨ P ≡ P ∨ true ≡ true Example 2 - (P∧Q)➝(P∨Q) ≡ true (P∧Q)➝(P∨Q) ≡ ¬(P∧Q)∨(P∨Q) implication law ≡ (¬P∨¬Q)∨(P∨Q) De Morgan law ≡ ((¬P∨¬Q)∨P)∨Q associative law ≡ ((¬Q∨¬P)∨P)∨Q commutative law ≡ (¬Q∨(¬P∨P))∨Q associative law ≡ (¬Q∨true)∨Q tautology & commutative ≡ true∨Q domination & commutative ≡ true domination & commutative Domination and commutative laws: true ∨ P ≡ P ∨ true ≡ true Now: Try proving the previous two equivalences using Truth tables Summary Atomic propositions: p, q, r Boolean connectives: ¬ ∧ ∨ ⊕ ➝ Compound propositions − e.g. P = (p∧¬q)∨r Logical equivalences and laws of equivalence Proving equivalences: use truth tables or laws of logical equivalence Laws of Equivalence Summary SheetReferences 1. Schneider, G. Michael, Judith Gersting, and Sara Baase. Invitation to Computer Science : Java Version (2nd Edition). 2. Goodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. Data structures and algorithms in Java. John Wiley & Sons (5th Edition onwards). 3. Goodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. Data structures and algorithms in Python. 4. Kent D. Lee, Steve Hubbard, Data Structures and Algorithms with Python, Springer, 2015. 5. Cormen, Thomas H., et al. Introduction to algorithms. MIT press, 2009 6. Sedgewick, Robert. Algorithms in Java, Parts 1–4 (Fundamental Algorithms, Data Structures, Sorting, Searching). Addison Wesley, 2002. 7. Discrete Mathematics & its Applications, Kenneth H. Rosen (5th, 6th, 7th or 8th Edition). 8. Gerard O'Regan, Concise Guide to Formal Methods. 9. F Oggier, Lecture Notes, Discrete Mathematics.","libVersion":"0.3.2","langs":""}