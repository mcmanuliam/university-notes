{"path":"software engineering/year 2/semester 1/Systems Programming/Slides/1. Learning C/Program Structure.pdf","text":"Program Structure Yehia Elkhatib COMPSCI2030 Systems ProgrammingArrays o Multiple related elements of the same type o Accessed using a single name and an index (aka subscript) § starts at 0 o The elements in an array are stored next to each other in memory o Arrays that are stored on the stack must have a fixed size § so that the memory is automatically managed o We can still use dynamic arrays, i.e. their size can change § not managed automatically Array declaration o Like any variable, arrays must be declared o Declaration must include data type and size (number of elements) o Size could be inferred from initialisation o Multidimensional arrays § as many dimensions as can be held in your memory § stored in a row major format, i.e. rows are stored after another Strings o A sequence of characters, i.e. an array of char’s § also a char* (more on this later in the course) o Quotation marks § we use doubles ” for string literals and singles ’ for char literals o Strings are terminated by a special character '\\0' § this is added automatically for string literals § if we forget it, you would read from / write to memory all contents until you hit the next bit pattern equivalent of '\\0'! o To print a string with printf we use the %s formatting character String Manipulation o A lot in string.h § strlen – get length § strcpy & strncpy – copy contents § strcat & strncat – concatenate § strcmp & strncmp – compare two strings, character by character § strchr, strrchr, strcspn, strspn, strpbrk, strstr – search string o Please look them up on WikiBooks Structs o Another data structure that combines multiple elements o It consists of a set of members of (potentially) different types o Members are accessed using the . notation § like public class members in Java o Members are stored adjacently in memory in the order of definition o The type of a struct is written struct name o …but we can use typedef to shorten it Functions o A self-contained section of the code to carry out a task § modular and reusable o A very important abstraction mechanism in programming o A function definition in C looks like this: return_type function_name(param_type param_name, …) { body } § return type - the data type of the value that will be returned after evaluating the function • if no value is to be returned, the special type void is used § function name - a reference, ideally descriptive of the behaviour of the function § parameter list - specifies the data type and name of each parameter the function expects § function body - a block containing the code to be executed when calling the function o To call a function: we provide an argument for each parameter and capture / process the return value Function declaration and deﬁnition o A function declaration only specifies how it can be used o Function declarations are important for writing modular software § it allows to separate the interface (the declaration) from the implementation (the definition) How function calls work o Statements in a function are not executed until the function is called by another part of the program o When a function is called, the statements in the function then execute (using the arguments) o When the function’s statements finish, execution passes back to the same location in the program that called the function Call by value o How are arguments passed to functions when we call them? § The value 42 will be printed, because when we call a function we pass a copy of the arguments to it § x and y are stored at different memory locations § When set_to_zero is called the value of y is copied into the memory location of x o We call this call-by-value as the argument value is evaluated and stored in the parameter variable o All function calls in C pass arguments by value… Call by reference o …except for arrays o Copying an array could be very expensive (memory-wise) o Instead, the address of the first element is passed by value o Hence, any changes inside the function happen to the original data § i.e. changes to array elements are now visible outside the function o This special treatment of arrays will make more sense when we learn about pointers Lexical Scoping o Each pair of curly braces {} is a block and introduces a lexical scope o Variable names must be unique in the same lexical scope o For multiple variables with the same name, the variable declared in the innermost scope is used o Which values will be printed? First 2Then 6 Variable Lifetime • Variables are stored at locations in memory that do not change over their lifetimes o This depends on how the memory for the variable was allocated. There are 3 cases: 1. automatic: • Declared locally in a block (i.e. inside a pair of {}) • Their lifetime ends at the end of the block • All variables we have seen so far fall into this category 2. static: • Declared with the static keyword • …or defined at file-level outside all blocks • The lifetime is the entire execution of the program 3. allocated: • Explicit request of using dynamic memory allocation functions, such as malloc • We manage the lifetime of these variables ourselves (next lecture!)StackHeap make o GNU make is the most popular build system for C programs § automates the process of compiling programs § alternative build systems: Maven, Bazel, Ninja, … o A Makefile has the following structure: make o The first two lines form a rule that explain how a target is built o The first line is the dependency, made up of “[targets] : [sources]” o The target(s) depend on the source(s) § elements in each list are separated by a space o The following line(s) are the action § i.e. commands defining how the target is built § need to start with 1 tab o Makefiles are white-space sensitive! o Running make will execute the first rule in the current directory o make target will execute the rule to make the named target For more details man makeQuestion time 1. What happens if I use an index on an array that is larger than the number of elements in the array? 2. An array is declared using a. How many total elements does the array have? b. What would be the name of the tenth element in the array? 3. What must be the first line of a function definition, and what information does it contain?","libVersion":"0.3.2","langs":""}