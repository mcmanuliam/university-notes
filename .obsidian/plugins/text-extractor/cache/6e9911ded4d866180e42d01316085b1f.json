{"path":"university/year 2/semester 1/Systems Programming/Slides/1. Learning C/Basics of Systems Programming.pdf","text":"Basics of Systems Programming Yehia Elkhatib COMPSCI2030 Systems ProgrammingPersonal Introduction o Reader ~Associate Professor o Member of The GLAsgow Systems Section (GLASS) o Education ยง BSc Alexandria University ยง MSc Lancaster University ยง PhD Lancaster University o Research: data-driven deployment in complex infrastructures ยง cloud and edge computing ยง system-of-systems composition ยง intent-driven networking My Lecturing Approach o I strongly recommend handwritten notes ยง makes knowledge last a bit more, even if you discard the notes ยง helps with auditory processing disorder and ADHD o There are no stupid questions or answers o Specifically for SP(GA) part 1 ยง Material is top-heavy to get you started quickly on the coursework ยง I would rather go fast then slow down rather than vice versa ยง So feedback is very welcome ยง Question lottery What is Systems Programming? o Writing computer system software: used as a platform for other software, a layer of abstraction (scaffolding) ยง i.e. the main โcustomerโ is other software, not necessarily users ยง In contrast to application software o Examples of system software: operating system, drivers, compilers, โฆ o Usually, system software has specific performance constraints such as: ยง fast execution time ยง low memory consumption ยง low energy usage o To meet these constraints, systems programming languages allow for a more fine-grained control over the execution of programs History of Systems Programming o Until the 1970s ยง System software was generally written in processor-specific assembly languages โข mostly based on ALGOL 60 concepts ยง very difficult to write and maintain o 1972 ยง Ritchie and Thompson wanted to port UNIX from the DEC PDP-7 to the PDP-11 ยง They looked for a portable programming language (tried their B type-less language) ยง Invented C as an imperative language supporting structured programming Ken Thompson (sitting) and Dennis Ritchie (standing) at a PDP-11 minicomputer History of Systems Programming o 1983 ยง due to its popularity, C had numerous variants ยง ANSI defined standard versions: C85, C99, C11, โฆ o early 1980s ยง Bjarne Stroustrup aimed to enrich C with new abstraction mechanisms ยง Inspired by Simula, the first object-oriented language, he creates C++ โข Simula is a superset of ALGOL 60 o 2010s ยง New systems programming languages ยง e.g. Rust (2010) and Swift (2014) Bjarne Stroustrup A simple Python program o Q: What value does x hold at the end of the program execution? ยง (not a tricky question) ยง A: 42 o Q: How much memory does Python take to store x? ยง (a tricky question) ยง A: It depends on the Python implementation. sys.getsizeof(x) gets the answer. On my machine: 24 bytes (* 8 = 192 bits) o Q: How many instructions does Python execute to compute x+1? ยง (even more tricky) ยง A: I donโt know, but many more than just the addition ... Python is dynamically typed, so the data type of x could change at any time. Every operation tests the data types of the operands to check which instruction to execute. A lot of uncertainty and lack of control ๐ A simple C program o Q: What value does x have at the end of the program execution? ยง (not a tricky question) ยง A: 42 o Q: How much memory does C take to store x? ยง (not that tricky) ยง A: sizeof(int) usually 4 bytes (* 8 = 32 bits) o Q: How many instructions does C take to compute x+1? ยง (not that tricky) ยง A: 1 add instruction and 2 memory (mov) instructions ยง Note: a useful tool for this is https://godbolt.org/ Certainty allows strong reasoning about the programโs performance and execution behaviour Efficiency and Reliability Why C? o Versatile ยง whole OS, compilers, networking, games, word processors, web apps, โฆ o Portable (thanks to ANSI/ISO standards) ยง can be compiled and run on different platforms with no modification o Systems with constrained resources o Small number of keywords (32) o Modular ยง code reuse through functions and structures o Builds understanding of resource management ยง important for becoming a better developer Development Cycle โข Applies to all compiled languages Development Cycle o A compiler error indicates that it is not possible to compile your program ยง You must change your program to get it compiling o A compiler warning indicates an unusual condition that may (and quite often does) indicate a problem ยง Do not ignore warnings ยง You should change the program to: either fix the problem or clarify the code to avoid the warning Compilers o You understand your C code (I hope!) o Your computer does not; it only understands machine language o A compiler translates from source code to object code o There are many C compilers, around 50 or so ยง Borland Turbo C (1987) ยง GNU Compiler Collection, GCC (1987) ยง Tiny C (2005) ยง Clang (2007) Compiling o To compile and then execute a C program: o Translating source code into machine code is a multi-step process: 1. The preprocessor expands macros 2. In the compiling stage, the source code is a) parsed and turned into an intermediate representation b) machine-specific assembly code is generated c) machine code is generated in an object file 3. The linker combines multiple object files into an executable o We will peek into each of these with examples 1. Preprocessing2a. Compiler intermediate representation2b. Assembly code2c. Machine code3. Linking o The linker combines one or more object files into a single executable o The linker checks that all functions called in the program have machine code available ยง e.g. printfโs machine code is in the C standard library o If the machine code for a function cannot be found, the linker complains ยง e.g. The compiler is your friend o Errors and warnings indicate that there is something wrong o As you mature as a developer, you will wish that your compiler throws more errors rather than get runtime ones! Shell Detour o Basic file exploring ยง ls, pwd, mkdir, cd, cat, head, tail, cp, mv, rm, touch o Editing text files o man The main() Function o The only one required for any C program o It denotes the entry point to the program ยง there can only be one and exactly one o It returns an int to signify the exit code ยง 0 = normal execution and termination, i.e. at last statement in main ยง Non Zero Exit Code = abnormal termination ยง if no return statement, an implicit return 0 is executed Basic output with printf o Defined in stdio.h, it allows the formatted printing of values o The first argument is the format string (using special characters) o The second argument onwards are the values to be printed o The number and order of format strings and values have to match Special Characters Explanation Argument Type %c Single character char %s Character string String: (char *) %d signed integer in decimal representation int %l or %ld or %li Long long %f floating-point number in decimal representation float double Full list at: https://en.cppreference.com/w/c/io/fprintf Common questions at this point o Butโฆ I want to use an IDE ยง Feel free to, but we will not support you as this is not an aim of the course ยง There are real benefits in developing code through command line tools โข Understand the compile, link, execute process โข Sometimes the only way to develop, e.g. for small devices or headless servers ยง Can cause other issues (e.g. huge cache files) that we cannot help with o How can I install clang on [platform]? ยง Guide for common platforms in the labsheet ยง Follow instructions relevant to your platform at https://clang.llvm.org/get_started.html","libVersion":"0.3.2","langs":""}