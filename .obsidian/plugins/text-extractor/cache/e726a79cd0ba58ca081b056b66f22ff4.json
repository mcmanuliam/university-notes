{"path":"software engineering/year 2/semester 2/Algorithmics/Tutorial/3. Graphs and Graph algorithms/3.5 Weighted Graphs/3.5 Sheet.pdf","text":"Algorithmics - Tutorial Sheet 7 Graphs and graph algorithms 1. [Work in pairs] Apply the Dijkstra’s refinement of the Prim-Jarnik algorithm to find a minimum weight spanning tree of the weighted graph G shown below, using vertex u as the starting tree-vertex. Include in your answer the steps performed by the algorithm through the changes to the attribute “best tree vertex” for each vertex of the graph. Is the minimum weight spanning tree you found unique? Justify your answer. x y z u v w wt({u,v})=7 wt({u,w})=9 wt({u,z})=7 wt({v,w})=7 wt({v,y})=10 wt({v,z})=7 wt({w,x})=6 wt({w,y})=7 wt({w,z})=8 wt({x,y})=10 wt({x,z})=9 wt({y,z})=8 6 10 7 7 7 7 8 7 9 8 9 10 2. How would you extend Dijkstra’s shortest paths algorithm so that, in addition to determining the length of the shortest path from a vertex u to each of the other vertices, it also collects enough information to allow actual the shortest paths to be constructed? 3. In some applications, it is appropriate to allow the weight of an edge in a graph to be negative. However, a cycle of negative weight rarely makes sense, because a path of arbitrarily large negative weight can be created by repeatedly traversing the cycle. Suppose G is a weighted graph with arbitrary (positive or negative) integer weights, but with no negative weight cycles. Can Dijkstra’s algorithm be used to find shortest paths in such a graph? If so give a proof, if not give an illustrative example. 4. Suppose that the cost of a path in a weighted undirected graph is defined to be the largest weight of an edge in the path. Design an algorithm, similar to Dijkstra’s algorithm, to find the path of least cost from one fixed vertex to all of the other vertices in a graph.","libVersion":"0.3.2","langs":""}