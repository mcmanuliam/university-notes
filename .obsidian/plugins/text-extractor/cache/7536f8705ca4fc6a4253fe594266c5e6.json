{"path":"software engineering/year 2/semester 2/Data Science Fundamentals/Slides/2. Visualisation/2.1 Graphs, charts and plots.pdf","text":"D ata Fun damen tals (H) Week 3 : Scien tific visualisatio n Grap hs, charts an d p lo ts DF(H) - University of Glasgow - John H. W illiamson - 2020/2021 LaT eX commands p >< strong > SyntaxError < /strong >: unexpectedcharacterafterlinecontinuationcharacter(< ipython − input − 3 − 470fb1740f13 >, line1) < /p >< R Summary By the end of this unit you should know: what the grammar of graphics is: dataset, stat, scale, mapping, coord, geom, guide, layer , facet, figure, caption how elements of the grammar of graphics appear in a visualisation how to produce a correct, simple, scientific chart from numerical data the basic operation of matplotlib basic plot types: line plots, bar charts, scatter plots different ways of representing data in 2D plots the use of stats to transform data, including binning, summarisation and smoothing linear , log and polar coordinate systems and their uses the use of point, line and area geoms to represent data and standard aesthetic mappings for them appropriate aesthetic mappings for colour information how to criticise scientific visualisations how to represent uncertainty accurately in a plot Out[1]: Show Code What yo u sho uld be able to do Make graphs that are: Conceptually correct: data is represented visually in a way that makes sense. Technically correct: details of data representation are complete and accurate. Aesthetically correct: data is represented a visually pleasing way . Have the language and concepts to discuss, criticise and improve visual representations. NOT ACTUALLY PLAYFAIR What is visualisatio n ? Visualisation is the representation of data for human visual perception. V isualisation encodes abstract mathematical objects, like vectors of numbers, into a form that humans can draw meaning from. It encompasses everything from the most elementary bar chart to the most sophisticated volume renderings. Visualisation serves several purposes: to build intuition about relationships and structure in data; to summarise large quantities of data; to help decision-makers make quick judgments on specific questions. Scientific visualisations This course will focus on scientific visualisations; in particular visualising numerical data. The focus is on precision, clarity and accuracy in visualisation. While visual design is important, the focus here is on the core principles of representing data clearly using simple, static graphs. The core of the lecture is: how should you render tables as pictures so that a reader can make judgements based upon them? The good, the bad and the ugly Image: A dimensional mapping of visualisations. Ugly->beautiful goes left to right; useless->informative goes bottom to top. Credits: top left: Martin Grandjean (https://commons.wikimedia.org/wiki/File:Social_Network_Analysis_V isualization.png) CC-BY-SA 3.0 bottom right: Sheffno1gunner (https://commons.wikimedia.org/wiki/File:Opinion_Polling_Chart_for_the_2015_UK_General_Election.png) CC- BY-SA 3.0 bottom left: [unknown] upper left: W illiam Playfair , 1786(!) Basic categories We will focus on display of three basic categories: plots of single 1D array , like histograms (single columns) plots of pairs of 1D arrays , like scatterplots (two columns) plots of single 2D arrays , like contour plots (whole tables) These are all representations of datasets that can be represented as tables of numbers. We'll discuss briefly some approaches for 3D data ( triplets of 1D arrays and 3D arrays), vector fields (pairs of 2D arrays), and higher dimensional data. < <, < X <, <, < We will cover statistical transforms for visualisation and the appropriate representation of uncertainty in visualisations. Grammar o f Grap hics The creation of scientific visualisations can be precisely specified in terms of a graphical language . This is a language which specifies how to turn data into images (construction) and how readers should interpret those images (intepretation). For the moment assume a Dataset is a table of numbers (e.g. a 2D NumPy array). Each column represents a dif ferent attribute; each row a collection of related attributes: year price margin ------------------------- 1990 0.01 0.005 1991 0.018 -0.001 1992 0.002 -0.1 1993 0.02 0.005 There are various dif ferent ways of describing the graphical language used; the one described here follows the Layered Grammar of Graphics by Hadley Wickham (see the resources at the end). Image: flowchart of the layered grammar of graphics. Gray text indicates examples for each of the elements. Note that one layer may have several scales; one facet may have several layers; and one figure may have several facets. Everything above the dotted line is an abstract transformation of the dataset; everything below it is a visible feature of a graphical representation Stat A stat is a statistic computed from data which is then mapped onto visual features, with the intent of summarising the data compactly . For example, the mean and the standard deviation of a series of measurements would be stats. The binning of values in a histogram is another example of a stat. Mapping A mapping represents a transformation of data attributes to visual values. It maps selected attributes (which includes stats or raw dataset values) to visual values using a scale to give units to the attribute. Scale a scale specifies the transformation of the units in the dataset/stat to visual units. This might be from the Richter scale to x position, or from altitude to colour , or from condition number to point size. A scale typically specifies the range of values to be mapped. Guide A guide is a visual reference which indicates the meaning of a mapping, including the scale and the attribute being mapped. This includes axis tick marks and labels, colour scales, and legends. Geom A geom is the geometric representation of data after it has been mapped. Geoms include points (which may have size, colour , shape), lines (which may have colour , dash styles, thickness), and patches/polygons (which can have many attributes). Coord A coord is a coordinate system, which connects mapped data onto points on the plane (or , in general, to higher-dimensional coordinates, like 3D positions). The spatial configuration of geoms and guides depends on the coordinate system. Layer A layer of a plot is one set of geoms, with one mapping on one coordinate system. Multiple layers may be overlaid on a single coordinate system. For example, two dif ferent stats of the same dataset might be plotted on separate layers on the same coordinate system. Facet A facet is a dif ferent view on the same dataset, on a separate coordinate system. For example, two conditions of an experiment might be plotted on two dif ferent facets. One facet might have several layers. Figure A figure comprises a set of one or more facets Caption Every figure has a caption, which explains the visualisation to the reader . A n ato my o f a figure Figure an d cap tio n A figure is one or more facets that form a coherent visualisation of data. Many figures are single graphs (single facets), but some may include multiple facets. Every figure needs to have a clear caption which explains to the reader what they should see from the graph. Image: the relationship between figure and a caption. Every figure needs a clear caption. Even this one. The visual rep resen tatio n o f p lo ts: guides, geo ms an d co o rds Good scientific plots have a well defined structure. Every plot should have proper use of guides to explain the mapping and coordinate system : Guides Axes which are labeled, with any applicable units shown. These are guides for the coordinate system . Ticks indicating subdivisions of axes in labeled units for that axis. A legend explaining what markers and lines mean (if more than one present). These are guides which identifies dif ferent layers in the plot. A title explaining what the plot is A plot might have: A grid to help the reader line up data with the axes (again, a guide for the coordinate system ) A annotations to point out relevant features Geoms To display data, plots have geoms , which are geometrical objects representing some element of the data to be plotted. These include: Lines/curves representing continuous functions, which have colours, thicknesses, and styles Markers representing disconnected points, which have sizes, colours and styles Patches representing shapes with area (like bars in a bar chart), which can come in many forms Image: anatomy of a simple scientific graph, taken from the matplotlib documentation: http://matplotlib.org/examples/showcase/anatomy .html (http://matplotlib.org/examples/showcase/anatomy .html) matp lo tlib We'll be using matplotlib for our examples. This is a sophisticated plotting package that integrates with NumPy and the scientific Python stacks. It is one of several options for plotting in Python, but is the standard for publication-quality figures; its features are similar to that of fered by Matlab. The specific details of matplotlib are less important than the general concepts of making good scientific visualisations. Y ou will explore matplotib more thoroughly in the lab exercise for this unit. Matplotlib has many options and can produce a wide variety of plots, but we will be using a relatively small subset of available features. This is a quick but thorough example of matplotlib being used to plot some functions: Out[4]: <matplotlib.legend.Legend at 0x1c81bb42e10> B asic 2 D p lo ts D ep en den t an d in dep en den t variables Most useful plots only involve a small number of relations between variables. Often there are just two variables with a relation; one independent variable and one dependent variable, which depends on the independent variable. where and are scalar variables. The purpose of the plot is to visually describe the function . The input to these plots are a pair of 1D vectors . These are plotted with the independent variable on the x-axis (the variable that \"causes\" the relationship) and the dependent value on the y-axis (the \"ef fect\" of the relationship). For example, if you are doing an experiment and fixing some value to various test values (e.g. the temperature of a solution) and measuring another (e.g. the pH of the solution), the variable being fixed is the independent variable and goes on the axis, and the variable being measured is the dependent variable and goes on the axis. In some cases, there is no clear division between an the independent and dependent variable, and the order doesn't matter . This is unusual, however , and you should be careful to get the ordering right. y = f(x), x y f <, < x y C o mmo n 2 D p lo t typ es There are a few common 2D plot types. As always, we are working with arrays of data. Our mapping takes two columns of a dataset (or a stat of a dataset) and maps one to and one to . Scatterplot x y A scatter plot marks locations of measurements with markers . These are point geoms .(x, y) Out[7]: <matplotlib.collections.PathCollection at 0x1c81c464c50> Bar chart A bar chart draws bars with height proportional to at position given by . These are patch geoms .y x Line plot A line plot draws connected line segments between (x,y) positions, in the order that they are provided. These are line geoms . Out[8]: <BarContainer object of 4 artists> Marking measurements It is common to plot the explicit points at which measurements are available. This is a plot with two layers, which therefore share the same coords . One layer represents the data with line geoms , the second represents the same data with point geoms (markers). Ribbon plots Out[9]: [<matplotlib.lines.Line2D at 0x1c81cee0a58>] Out[10]: [<matplotlib.lines.Line2D at 0x1c81c4152e8>] If we have a triplet of vector , where both s match the then the area between the two lines can be drawn using polygon geoms . This results in a ribbon plot , where the ribbon can have variable thickness (as the difference varies). This can be also be thought of a line geom with variable width along the axis. <, <, < y x −y1 y2 x Layering geoms This often combined in a layered plot, showing the data with: line geoms for the trend of the data point geoms for notating the actual measurements area geoms to represent measurement uncertainty Out[11]: <matplotlib.collections.PolyCollection at 0x1c81bfb9be0> Out[12]: <matplotlib.legend.Legend at 0x1c81be8cd68> Plo ttin g data well Let's load some test data, which is a study of the ef fect of vitamin C supplements on the growth of Guinea pig teeth (https://raw .githubusercontent.com/vincentarelbundock/Rdatasets/master/doc/datasets/T oothGrowth.html) The data measures the length of guinea pig teeth for various doses of V itamin C, which are administered in two different forms (orange juice or vitamin capsule). Image credit: Mariposa V et CC-BY-2.0 from https://www .flickr.com/photos/mariposavet/1 1078388266/ (https://www .flickr.com/photos/mariposavet/1 1078388266/) [[ 1. 4.2 0. 0.5] [ 2. 11.5 0. 0.5] [ 3. 7.3 0. 0.5] [ 4. 5.8 0. 0.5] [ 5. 6.4 0. 0.5] [ 6. 10. 0. 0.5] [ 7. 11.2 0. 0.5] [ 8. 11.2 0. 0.5] [ 9. 5.2 0. 0.5] [10. 7. 0. 0.5]] This is how not to make a plot Let's see an example of a really bad plot of this data: Criticism This has: no guides no axes no ticks no labels no units no title no legend bad coords the dependent label on the x axis, and the independent on the y axis bad mappings no distinct colours bad geoms use of lines for data that is clearly not a continuous curve It is a \"valid\" plot of the data, but totally unhelpful for the reader . There is no way a reader can make judgments (should I give my guinea pig orange juice? ) from this graph. Out[16]: (2.715, 35.385, 0.425, 2.075) A slightly better plot Now , guides There are axes with visible numbering coords the dependent axis is and the independent is geoms a scatterplot is used instead of a line plot mapping colours are distinct However , it is still useless for making judgments from the plot alone, as it lacks any form of labelling to indicate what the geometry represents. y x Better still: Labelling Out[17]: <matplotlib.collections.PathCollection at 0x1c81bf71128> Now , guides the plot has a title the axes are labelled, with description and units there is a legend indicating which colours match which condition there is a grid for easier reading (this is more of an aesthetic choice than the other issues) the x ticks are in sensible places. the y axis extends from the origin Break: watch this 0:00 Out[18]: <matplotlib.legend.Legend at 0x1c81bfea4e0> Units If an axes represents real world units ( dimensional quantities ), like millimeters, Joules, seconds, kg/month, hectares/gallon, rods/hogshead, nanometers/Coulomb/parsec the units should absolutely always be specified in the axis labels. Use units that are of the appropriate scale. Don't use microseconds if all data points are in the month range. Don't use kilowatts if the data points are in nanowatts. There are exceptions to this if there is some standard unit that not using would be confusing. Only if the quantities are truly dimensionless (bare numbers ), like in the graph of the pulses at the start of the lecture, should there be axes without visible units. In these cases the axis should be clearly labeled (e.g. \"Relative growth\", \"Mach number\", etc.). Never use the index of an array as the axis unless it is the only reasonable choice. For example, if you have data measured in regular samples over time, give the units in real time elapsed (e.g. microseconds), not the sample number! A void rescaled units Although matplotlib and other libraries will autoscale the numbers on the axis to sensible values and then insert a 1eN label at the top, you should avoid this. This can lead to serious confusion and is hard to read. x If possible, rescale the units yourself and insert the scaling in the axis label. Out[19]: Text(0, 0.5, 'Y') A xes an d co o rdin ate tran sfo rm An axis is used to refer to the visual representation of a dimension on a graph (e.g. \"the x axis\"), and the object which transforms data from measurement units to visual units . In other words, the axis specifies the scaling and of fset of data: a coordinate system or coord . The mapping of data is determined by axis limits which specify the minimum and maximum measurement values to be displayed. For example, it may be better in the example above to show the range for dose and tooth length starting at zero: Out[20]: Text(0, 0.5, 'Y (billions)') Don't deceive It is a very common \"trick\" to use axes that don't span the full scale to make dif ferences look larger than they seem. This is often seen in political and advertising material. This should be avoided unless it makes the graph clearer and more precise. Layered versus faceted This is a layered plot. T wo dif ferent view of the dataset (the \"OJ\" selection and the \"VC\" selection) are overlaid on the same coordinate system. W e could alternatively plot this as a faceted visualisation, separating the OJ and VC views onto two separate coordinate systems which have the same scaling (for easy comparision) . This corresponds to creating multiple subplots , one for each coordinate system. Out[21]: (0, 40) On e dataset, man y views A visualisation must communicate meaning to a reader . A visualisation is not defined by a dataset -- some visualisation types are good for certain kinds of dataset and worse for others, but the visualisation choice comes down to what the purpose of the visualisation is. It's often helpful to think of the caption that you would want to be able to write before creating the visualisation. We'll look at a straightforward dataset, which consists of quarterly measurements of the gas used in the UK, recorded from 1960 to 1986. This is a simple relationship of the type where is the year and is the gas used. The original units are megatherms. 1 megatherm is about 30,000,000 kWh. y = f(x), x y Straghtfo rward p lo t, lin e+marker [[ 1. 1960. 160.1 ] [ 2. 1960.25 129.7 ] [ 3. 1960.5 84.8 ] [ 4. 1960.75 120.1 ] [ 5. 1961. 160.1 ] [ 6. 1961.25 124.9 ] [ 7. 1961.5 84.8 ] [ 8. 1961.75 116.9 ] [ 9. 1962. 169.7 ] [ 10. 1962.25 140.9 ]] Figure 1: Gas usage in the UK, 1960-1986. Gas usage follows a strongly seasonal pattern, with an overall increase in gas usage. V ariability across seasons has increased over time. Simp lified p lo t Figure 2: Gas usage in the UK, 1960-1986. Gas usage has increased over time, with a notable increase in the trend after 1970. Out[25]: Text(0.5, 1.0, 'UK Gas quarterly gas usage 1960-1986') Layered p lo t, sp lit by q uarters Figure 3: Gas usage in the UK, 1960-1986, split by quarters. There is marked dif ference in gas usage across seasons. Winter use increased dramatically between 1970 and 1985, although summer use remained almost constant, although early signs of an uptick in summer gas use seem to be present. Faceted p lo t Out[27]: <matplotlib.legend.Legend at 0x1c81e612470> Figure 4: Gas usage in the UK, 1960-1986, split by quarters. There is marked dif ference in gas usage across seasons. Autumn use remained constant from 1960-1971, but rose very rapidly after 1971. Winter gas use increases super-linearly , while spring and summer use show more gradual increases. Summer 1971 appeared to have particularly high gas usage. Statistcally tran sfo rmed p lo t, bin n ed by seaso n Figure 5: Gas usage in the UK, 1960-1986, split by quarters. Winter gas use is higher than other seasons, but also has significantly higher variability . Summer gas use varies little over the years. Ribbo n p lo t, sho win g mean an d ran ge Out[29]: Text(0.5, 1.0, 'UK Gas quarterly gas usage 1960-1986') Out[30]: <matplotlib.legend.Legend at 0x1c81edfcf60> Figure 6: Gas usage in the UK, 1960-1986, split by quarters. Gas use shows an increasing trend, though leveling of f in the 1980s. The variation between winter and summer use has increased dramatically during the 1970s and 1980s. Figure 7: Gas usage in the UK, 1960-1986. Plot shows the median consumption in each year versus the minimum and maximum seasonal use. Gas consumption is virtually always in the range 0.75 to 2.5 times the mean usage, but the maximum use has increased as the median use has crept up. In years with the highest median consumption, however , the maximum consumption is only around 1.8 times the median use. Out[31]: Text(0.5, 1.0, 'UK Gas quarterly gas usage 1960-1986, min/max usage versus median usage') Figure 8: Gas usage in the UK, 1960-1986. Megatherms of gas are shown converted to metric tonnes of CO2 emitted, accumulated over the period 1960 to 1985. Cumulative CO2 emissions appear to be increasing almost quadratically , and more than 200,000,000 tonnes of CO2 were emitted by the UK through natural gas burning by 1986. Stats A stat is a statistic of a Dataset (i.e. a function of the data). Statistics summarise data in some way . Common examples of stats are: aggregate summary statistics, like measures of central tendency (mean, median) and deviation (standard deviation, max/min, interquartile range) binning operations , which categorise data into a number of discrete bins and count the data points falling into those bins smoothing and regression , which find approximating functions to datasets, like linear regression which fits a line through data Plots of a single 1D array of numbers usually involve displaying statistics (stats) to transform the dataset into forms that 2D plotting forms can be applied to. V ery often these plot types are used with multiple arrays (data that has been grouped in some way) to show dif ferences between the groups. [ , , … , ]x1 x2 xn Out[32]: Text(0.5, 1.0, 'UK Gas cumulative CO2 produced from gas since 1960') B in n in g o p eratio n s A binning operation divides data into a number of discrete groups, or bins . This can help summarise data, particularly for continuous data where every observation will be dif ferent if measured precisely enough (for example, a very precise thermometer will always show a dif ferent temperature to the same time yesterday). Histograms: showing distributions A histogram is the combination of a binning operation (a kind of stat) with a standard 2D bar chart (the bars being the geoms ). It shows the count of values which fall into a certain range. It is useful when we want to visualise the distribution of values. A histogram does not have spaces between bars, as the bin regions represent contiguous divisions of the input space. Out[33]: Text(0, 0.5, 'Count of quarters') The results of a histogram depend heavily on the bins chosen. T oo many bins means that the result is sparse and \"gappy\" -- the overall trend is obscured. T oo few bins means the result is overly smoothed and details are lost. Out[34]: Text(0, 0.5, 'Count') Out[35]: Text(0.5, 1.0, 'Too many bins') If the bins are placed in the wrong area, then they will not capture any meaningful portion of the data. Binning can work in any dimension. W e'll see in future lectures why this gets less useful as dimension increases, however . Out[36]: Text(0.5, 1.0, 'Too few bins') Out[37]: Text(0.5, 1.0, 'Badly placed bins') Out[38]: <matplotlib.colorbar.Colorbar at 0x1c821be0e48>c:\\local\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:9: RuntimeWarning: overflow encountered in square if __name__ == '__main__': c:\\local\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:9: RuntimeWarning: invalid value encountered in square if __name__ == '__main__': c:\\local\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:10: RuntimeWarning: overflow encountered in absolute # Remove the CWD from sys.path while we load stuff. c:\\local\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:10: RuntimeWarning: invalid value encountered in less # Remove the CWD from sys.path while we load stuff. Out[39]: <matplotlib.image.AxesImage at 0x1c821c5cfd0> Ran kin g o p eratio n s Sorted bar chart An alternative view of a 1D vector is a sorted chart or rank plot , which is a plot of a value against its rank within the array . The value-to-rank operation is the stat which is applied. Out[40]: Text(0.5, 1.0, 'Rank plot (bars)') Out[41]: Text(0.5, 1.0, 'Rank plot (points)') A ggregate summaries Any standard summary statistic can be used in a plotting operation. A particularly common statistical transform is to represent ranges of data using either the minimum/maximum, the standard deviation, or the interquartile range. These are often ranges of groupings of data (e.g. conditions of an experiment). The plots below show the gas data, summarised over quarters using three dif ferent stats: mean and standard deviation minimum, maximum and arithmetic mean of the minimum and maximum median and interquartile range Box plot A Box plot (this is actually named after George Box of Box-Cox fame, not because it looks like a box!) is a visual summary of an array of values. It computes multiple stats of a dataset, and shows them in a single geom which has multiple components. It is an extremely useful plot for comparing the distribution of values. The value shown are usually: the interquartile range (the range between the 75% and 25% percentiles of the dataset), shown as a box the median value, shown as a horizontal line, sometimes with a \"notch\" in the box at this point. the extrema, which can vary between plots, but often represent the 2.5% and 98.5% percentiles (i.e. span 95% of the range). They are drawn as whiskers, lines with a short crossbar at the end. outliers , which are all dataset points outside of the extrema, usually marked with crosses or circles. The typical use case is to compare multiple vectors; for example two dif ferent conditions of an experiment: Out[43]: Text(0.5, 1.0, 'Box plot') The notches give an estimate of how representative the median is of the expected population median. Violin plot The violin plot extends the Box plot to show the distribution of data more precisely . Rather than just a simple box, the full distribution of data is plotted, using a smoothing technique called a kernel density estimate . Out[44]: Text(0.5, 1.0, 'Box plot comparison') Out[46]: Text(0.5, 1.0, 'Violin plot comparison') Regressio n an d smo o thin g Regression involves finding an approximating function to some data; usually one which is simpler in some regard. The most familiar is linear regression -- fitting a line to data. We will not go into how such fits are computed here, but they are an important class of stats for proposing hypotheses which might explain data. f(x) = mx + c,  f(x) ≈ y Smoothing Likewise, the moving average smoother we saw in the earlier gas example finds a \"simplified\" version of the data by removing fast changes in the values. There are many ways of smoothing data, all of which imply some assumption about how the data should behave. A good smoothing of data reveals the attributes of interest to the reader and obscures irrelevant details. Out[47]: Text(0.5, 1.0, 'UK Gas usage 1960') Out[48]: Text(0.5, 1.0, 'UK gas usage 1960-1986, 3 yr running mean') Geo ms Markers Markers are geoms that represent bare points in a coordinate system. These typically as a visual record of an discrete observation . In the simplest case, they are literally just points marked on a graph; however , they typically convey more information. There are several important uses of markers: Layer identification The geom used for marking points can be used to dif ferentiate dif ferent layers in a plot. Both the shape and the colouring can be modified to distinguish layers. Excessive numbers of markers quickly become hard to read! Image: markers available in Matplotlib. [Adapted from the Matplotlib documentation] (https://matplotlib.org/examples/lines_bars_and_markers/marker_reference.html (https://matplotlib.org/examples/lines_bars_and_markers/marker_reference.html) ) C o lo ur cho ices Choosing good colour for plots is essential in comprehension. Care should be taken if plots may be viewed in black and white printouts, where colour dif ferences will become dif ferences in shade alone. Also, a significant portion of the population suf fers from some form of colour blindness, and pure colour distinctions will not be visible to these readers. Out[49]: Text(0.5, 1.0, 'Layers denoted by marker geometry') Out[50]: Text(0.5, 1.0, 'Layers denoted by marker colour') Markers: Scalar attributes Markers can also be used to display a third or event fourth scalar attribute, instead of identifying layers in a plot. In this case we, are not visualising just a pair of vectors , but or possibly . This is done by modulating the scaling or colouring of each marker . The plots below show measurements of earthquakes around Fiji. Each measurement has a 2D position (on the surface of the Earth), a depth (in km below surface) and a magnitude (in the Richter scale), for a total of four variables. <, < <, <, < <, <, <, < Out[52]: Text(0, 0.5, 'Latitude') Out[54]: Text(0, 0.5, 'Latitude') Colour maps Colouring of markers is done via a colour map , which maps scalar values to colours. Colour maps should always be presented with a colour bar which shows the mapping of values to colours. This is an example of a guide used for an aesthetic mapping beyond the 2D coordinate system. The colour map choice is important. A colour map maps a continuous variable to a colour , usually specified in the form of (red,green,blue) triplets. There are many choices for this mapping, but only a few good ones. Image: colormaps in matplotlib. Adapted from the matplotlib documentation (https://matplotlib.org/examples/color/colormaps_reference.html) Unsigned scalar If the data to be represented is a positive scalar (e.g. heights of people), use a colour map with monotonically varying brightness . This means that as the attribute increases, the colour map should get consistently lighter or darker . viridis is good, as is magma . These are perceptually uniform , such that a change in value corresponds to a perceptually uniform change in intensity across the whole scale (the human visual system is very nonlinear , and these scales compensate for this nonlinearity). Grayscale or monochrome maps can be used, but colours with brightness+hue are often easier to interpret. monotonic brightness increasing data value always leads to an increase in visual brightness perceptually uniform a constant interval increase in data value leads to a perceptually constant increase in value. x Perceptual linearity Colormaps shown in grayscale. Good scales should be monotonic (i.e. always increase/decrease in brightness) BAD and NONLINEAR: the notches do not appear to be even GOOD and LINEAR: notches are even Colour map examples Some colour maps, like the old-fashioned jet colourmap are terrible for this. They introduce false contours in visualisations because they do not have the property of monotonic brightness. (see this article (https://www .mathworks.com/tagteam/81 137_92238v00_RainbowColorMap_57312.pdf) for details on why this is really bad and can lead to misleading results). Make it p o p There is a web applet where you can experiment with the distortion in contrast that bad colourmaps produce: https://predictablynoisy .com/makeitpop-intro (https://predictablynoisy .com/makeitpop-intro) Signed scalar If your data is signed (and the sign matters), use a colour map which diverges around 0, and is monotonic in brightness in each side of 0. Out[61]: Text(0.5, 1.0, 'Divergent color mapping for signed values') Out[62]: Text(0.5, 1.0, 'Divergent color mapping for signed values') Scaling colourmaps Scale data to colorscales appropriately , and always provide a colour bar for reference. It must be possible to invert the visual units to recover the data units, and the colour bar is the essential guide for that purpose. Lin es Lines are geoms that connect points together . A line should be used if it makes sense to ask what is between two data points; i.e. if there is a continuum of values. This makes sense if there are two ordered arrays which represent samples from a continuous function Linestyles Line geoms can have variable thickness and variable colour y = f(x). Out[63]: Text(0.5, 1.0, 'Very bad colour map for signed values') They may also have dif ferent dash patterns which make it easy(ish) to distinguish dif ferent lines without relying on colour . Colour may not be available in printed form, and excludes readers with colour blindness. More than four dash patterns on one plot is bad idea, both from an aesthetic and a communication stand point. Out[64]: <matplotlib.legend.Legend at 0x1c82dac1b38> Out[65]: <matplotlib.legend.Legend at 0x1c82db53d68> The staircase and the bar In some cases, it makes sense to join points with lines (because they form a continuous series), but we know that the value cannot have changed between measurements. For example, imagine a simulation of a coin toss experiment, plotting the cumulative sum of heads seen. This makes no sense as an ordinary line graph. W e can't be half way through a coin toss! In this case, a staircase (or step ) plot is appropriate. This connects points with lines, but keeping the value fixed until a new data point is observed, rather than linearly interpolating in between. Out[67]: Text(0.5, 1.0, 'Coin toss experiment') If measurements of are naturally discrete (e.g. days of the week, conditions in an experiment), then a bar chart may be suitable. For example, the quarterly minimum and maximum gas data from the previous example naturally falls into years. These can be plotted as bars x Out[68]: Text(0.5, 1.0, 'Coin toss experiment') Out[69]: Text(0.5, 1.0, 'UK gas usage, 1960-1986') A lp ha an d tran sp aren cy Geoms can be rendered with dif ferent transparency , so that geoms layered behind show through. This is referred to as opacity (the inverse of transparency) or the alpha (equivalent to opacity). This can be useful when plotting large numbers of geoms which overlap (e.g. on a dense scatterplot), or to emphasise/deemphasise certain geoms, as with line thickness. Transparency should be used judiciously; a plot with many transparent layers may be hard to interpret, but it can be a very ef fective way of providing visual emphasis. Alpha to mitigate geom overlap Out[70]: Text(0, 0.5, 'Latitude') Alpha for emphasising geoms Out[71]: Text(0, 0.5, 'Latitude') C o o rds So far , we have assumed a simple model for coordinate systems ( coords ). We have just mapped two dimensions onto a two dimensional image with some scaling. More precisely , we have assumed that the mapping from data to visual units is linear mapping of each independent data dimension and to a Cartesian coordinate frame defined by a set of axis limits. An axis limit specifies a range in data units (e.g. 0 to 500 megatherms) which are then mapped onto the available space in the figure in visual units (e.g. 8cm or 800px). In matplotlib for example, we can control the visual units of a figure using figsize when creating a figure (which, by default, are in inches). The axes will span some portion of that figure, and these define the coord for the visualisation. The axis limit ax.set_xlim() and ax.set_ylim() commands specify the data unit range which is mapped on. x y Out[72]: <matplotlib.legend.Legend at 0x1c82963af28>Out[73]: [<matplotlib.lines.Line2D at 0x1c8295403c8>]Out[74]: (500, 600) A sp ect ratio In some cases, the aspect ratio of a visualisation is important. For example, images should never be stretched or squashed when displayed. In the left plot below , the shape is circular but appears elliptical: The aspect ratio of the coord will by default be defined by the size of the figure, and the portion of the figure dedicated to a subplot. It can be manually adjusted using set_aspect() to force the visual units to span equal data units. Coords in general A coordinate system encompasses a projection onto the 2D plane, and might include transformations like polar coordinates, logarithmic coordinates or 3D perspective projection. W e have so far seen only linear Cartesian coordinates, which are very simple projections. But there are other projections which can be useful to reveal structure in certain kinds of datasets. Out[75]: Text(0.5, 1.0, 'Forced oblate aspect circle') Log scales Sometimes a linear scale is not an ef fective way to display data. This is particularly true when datasets have very large spans of magnitude. In this case, a logarithmic coordinate system can be used. Log scales can be used either on the -axis, -axis or both, depending on which variable(s) have the large magnitude span. If the plot is log in only , the plot is called \"semilog \"; if only , \"semilog \" and if logarithmic on both axes \"log-log\". In matplotlib , set_xscale / set_yscale can be used to change between linear and log scales on each axis. (side note: there are also commands semilogx , semilogy and loglog which are just aliases for plot with the appropriate scale change). x y y y x x Out[77]: <function numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)> Polynomial or power-law relationships Log-log scales (log on both and axes) are useful when there is a (suspected) polynomial relationship between variables (e.g. or ). The relationship will appear as a straight line on a log-log plot. looks linear if plot on loglog . The gradient of the line tells you the value of k . x y y = x2 y = x 1 3 f(x) = xk Negative numbers Note that log scales have one downside: the log of a negative number is undefined, and in fact the logarithm diverges to -infinity at 0. This means that signed data cannot easily be plotted on a log scale (at least if the sign is meaningful and can't just be shifted to a positive number by adding on a constant). Out[78]: <matplotlib.legend.Legend at 0x1c82c695b70> nan -inf c:\\local\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in log \"\"\"Entry point for launching an IPython kernel. c:\\local\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in log There are modified log scales that \"cut out\" a small region around 0, and then plot log(abs(x)) * sign(x) -- the symmetric logarithm or symlog . The \"cut out\" region is plotted as linear in that range. This distort the plot slightly , but is usually acceptable. Out[80]: Text(0.5, 1.0, 'Linear plot of cos(x)*tan(x/2)*exp(x)') Out[81]: Text(0.5, 1.0, 'semi log y plot of cos(x)*tan(x/2)*exp(x)') Out[82]: Text(0.5, 1.0, 'symlog plot of $\\\\cos(x)*\\\\tan(x/2)*\\\\exp(x)$') Polar Cartesian plots are the most familiar coords. But some data is naturally represented in dif ferent mappings. The most notable of these is polar coordinates , in which two values are mapped onto an angle and a radius . This most widely used for data that originated from an angular measurement, but it can be used any time it makes sense for one of the axes to \"wrap around\" smoothly . The classic example is radar data obtained from a spinning dish, giving the reflection distance at each angle of the dish rotation. Similarly , wind data from weather stations typically records the direction and speed of the strongest gusts. [Image (https://flickr .com/photos/24931020@N02/16096731 164) by Ozzy Delaney (https://flickr .com/people/24931020@N02) license CC BY (https://creativecommons.org/licenses/by/2.0/) ] θ r Negative numbers (again) The sign issue raises it head again with polar plots -- there isn't a natural way to represent radii below zero on a polar plot. In general, polar plots should be reserved for mappings where the data mapping onto is positive.r Out[83]: Text(0, 0.5, 'Speed (mph)') Facets an d layers We have seen several examples where multiple geoms have been used in a single visualisation. There are two ways in which this can be rendered: as distinct layers superimposed on the same set of coords as distinct facets on separate sets of coords (with separate scales and guides) LAYERED FACETED Layers Layering is appropriate when two or more views on a dataset are closely related, and the data mapping are in the same units. For example, the historical wheat price data can be shown usefully as a layered plot. A legend is an essential guide to distinguish the dif ferent layers that are present. If multiple layers are used, a legend should (almost) always be present to indicate which geom relates to which dataset attribute. It would not make any sense to plot the ratio of the wage to the price of wheat on the same graph. The ratio does not have units of shillings, and cannot be overlaid on the same set of coords . Occasionally you will see visualisations with double axes. This is a layering which has a common mapping but uses two dif ferent mappings -- two (slightly) dif ferent coords layered over each other . This style of visualisation should be avoided, as it can be dif ficult to interpret and mislead the reader . y x y Out[84]: Text(0.5, 1.0, 'Price of wheat and weekly wage of a skilled worker') Out[85]: Text(0.5, 1.0, '[Bad plot] Price of wheat and weekly wage of a skilled worker') Facets A much better approach is to use facets; separate coords to show separate aspects of the dataset. Facets have no need to show the same scaling or range of data. However , if two facets show the same attribute (e.g. two facets showing shillings) they should if possible have the same scaling applied to make comparisons easy . Out[86]: Text(0.5, 1.0, '[Bad-ish plot] Price of wheat and weekly wage of a skilled worker') Out[87]: Text(0, 0.5, 'Ratio') Facet layout There are many ways to lay out facets in a figure, but by far the most common is to use a regular grid. This is the notation that matplotlib uses in fig.add_subplot(rows, columns, index) . Calling this function creates a notional grid of rows x columns and then returns the axis object (representing a coord ) to draw in the grid element indexed by index . Indices are counted starting from 1, running left to right then bottom to top. Out[88]: Text(0.5, 0.98, \"Bad -- don't use different scalings for the same variable in different facets!\") C o mmun icatin g Un certain ty It is critical that scientific visualisations be honest ; and that means representing uncertainty appropriately . Data are often collected from measurements with observation error , so the values obtained are corrupted versions of the true values. For example, the reading on a thermometer is not the true temperature of the air . Other situations may introduce other sources of error; for example, roundof f error in numerical simulations; or uncertainty over the right choice of a mathematical model or its parameters used to model data. These must be represented so that readers can understand the uncertainty involved and not make judgements unsupported by evidence. We have already seen the basic tools to represent uncertainty in plots: stats like the standard deviation or interquartile range can be used to show summaries of a collection of data. Error bars For example, let's look at the guinea pig data again, this time as a bar chart: This is a bad visualisation. It summarises the results using a mean, and compares them. But the data consists of a sample of measurements and the variation is important. Is OJ consistently better than VC? How much should we believe this? How certain can we be of these results? <Figure size 1440x720 with 0 Axes> Out[91]: [Text(0, 0, '0.5mg/day'), Text(0, 0, '1.0mg/day'), Text(0, 0, '2.0mg/day')] Error bar choice There are several choices for the error bars: the standard deviation the standard error confidence intervals (e.g. 95%) nonparametric intervals such as interquartile ranges. We won't cover the details of these choices here. Whichever is used, it should be made clear in the plot what the error bars mean. There is no universal standard, and it must be labeled in the plot or in the accompanying caption. Box plots A very good choice for this type of plot is to use a Box plot , as we saw earlier . This makes clear the spread of values that were encountered in a very compact form. Out[92]: [Text(0, 0, '0.5mg/day'), Text(0, 0, '1.0mg/day'), Text(0, 0, '2.0mg/day')] D o t p lo t An alternative is simply to jitter the points on the x-axis slightly: No handles with labels found to put in legend. Out[93]: [Text(0, 0, '0.5mg/day'), Text(0, 0, '1.0mg/day'), Text(0, 0, '2.0mg/day')] Out[94]: [Text(0, 0, '0.5mg/day'), Text(0, 0, '1.0mg/day'), Text(0, 0, '2.0mg/day')] This is especially ef fective with larger amounts of data No handles with labels found to put in legend. (3, 10, 4) Out[95]: [Text(0, 0, '0.5mg/day'), Text(0, 0, '1.0mg/day'), Text(0, 0, '2.0mg/day')] (27, 4) No handles with labels found to put in legend. (27, 3) Out[96]: [Text(0, 0, 'Winter'), Text(0, 0, 'Spring'), Text(0, 0, 'Summer'), Text(0, 0, 'Autumn')] Areas we haven't covered There are many other areas of visualisation which we will not be able to cover in this course. Discrete structure visualisations are focused on visualising discrete structures like graphs, networks and trees (e.g. for genome analysis). Representing connectivity between elements is an important part of such visualisations. Image a discrete graph visualisation credit: screenshot from Mike Bostock's d3.js blog (https://bl.ocks.org/mbostock/4063550) Geographical visualisations are focused on relaying geographical information (e.g. maps of gravitational field strength across the Earth). Correct projection and interpolation of data with geographical coordinates is key in these visualisations. Image: gravitational variations across the planet credit: NASA (https://eoimages.gsfc.nasa.gov/images/imagerecords/3000/3666/PIA04652_lrg.jpg) ; public domain High dimensional visualisations are used to represent data with many variables (e.g. a table with many rows) in a single 2D (or 3D) plot. V arious mathematical techniques are used to \"squeeze\" data onto a space so that important relationships are preserved. Faithful representation of original structure and dealing with clutter are important issues in high-d visualisation. Image (https://flickr .com/photos/kylemcdonald/25478228166) : low dimensional embedding of digits by Kyle McDonald (https://flickr .com/people/kylemcdonald) shared CC BY (https://creativecommons.org/licenses/by/2.0/) (see here (http://fontjoy .com/projector/) for a cool example of embedding fonts in high dimensions). Volume visualisations are intended to reveal the structure of solid 3D bodies (e.g. from computer-aided tomography; CA T scans). Representing depth and dealing with occlusion are key challenges in volume visualisations. Image: V olume rendering of a human skull credit: By Arielinson - Own work, CC BY -SA 4.0 (https://commons.wikimedia.org/w/index.php?curid=50903553) Interactive visualisations There is a whole field of research into experimental visualisations, dealing with large scale data, high dimensional data, data with complex structures, among other topics. Many of these visualisations involve interactive elements to allow users to explore as well as view them. You can see lots of these in browser at the excellent d3.js gallery (https://github.com/d3/d3/wiki/Gallery) Reso urces Ten simple rules for better figures http://journals.plos.org/ploscompbiol/article/file? id=10.1371/journal.pcbi.1003833&type=printable (http://journals.plos.org/ploscompbiol/article/file? id=10.1371/journal.pcbi.1003833&type=printable) (and the accomapnying video https://www .youtube.com/watch?v=p7Mj-4kASmI (https://www .youtube.com/watch?v=p7Mj-4kASmI) ) (recommended; read this and watch the video ) Layered Grammar of Graphics http://vita.had.co.nz/papers/layered-grammar .pdf (http://vita.had.co.nz/papers/layered-grammar .pdf) (long, but detailed) How to choose a chart for data http://extremepresentation.typepad.com/files/choosing-a-good-chart-09.pdf (http://extremepresentation.typepad.com/files/choosing-a-good-chart-09.pdf) Beyond this course: Randal Olson's blog http://www .randalolson.com (http://www .randalolson.com) has many , many examples of good visualization, mainly using Python for graph preparation. How to Lie with Statistics Darrel Huf f (short, easy to read, worth reading) Grammar of Graphics by Leland Wilkinson (ISBN-13: 978-0387245447): the book on a computational approach to scientific visualisation. Information V isualization: Perception for Design Colin W are: a serious book on advanced visualisations. The classic Tufte books The Visual Display of Quantitative Information by Edward T ufte Visual Explanations: Images and Quantities, Evidence and Narrative by Edward T ufte Envisioning Information by Edward T ufte","libVersion":"0.3.2","langs":""}