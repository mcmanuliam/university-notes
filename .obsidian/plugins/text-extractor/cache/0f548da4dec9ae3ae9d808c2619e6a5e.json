{"path":"software engineering/year 2/semester 2/Advanced Professional Software Engineering/Slides/2.1 Agile and Software Development Methodologies.pdf","text":"Advanced Professional Software Engineering 2024-25 Lecture 2 – Agile and Software Development Methodologies S Waqar Nabi (with thanks to Marco Tulio Valente, Universidade Federal de Minas Gerais) Mar 2025 Page 1 Agile and Software Development Methodologies • Software Engineering – Why and What? • Agile – Brief Review • Technical Debt Management in Agile Teams • DevOps, Continuous Integration, Continuous Delivery (CI/CD)Software Engineering – Why and What? Page 3 Agile and Software Development Methodologies • Software Engineering – Why and What? • Agile – Brief Review • Technical Debt Management in Agile Teams • DevOps, Continuous Integration, Continuous Delivery (CI/CD) NATO Conference (Germany, 1968) Often regarded as the event that established the field of Software Engineering Working Conference on Software Engineering 5 Areas of Software Engineering 6 Guide to the Software Engineering Body of Knowledge Traditional Engineering 7 ● Civil, mechanical, electrical, aviation, automotive, etc ● Has existed for thousands of years ● Two key characteristics: ○ Big Design Upfront (BDUF) ○ Sequential (Waterfall) Thus, SE also started using Waterfall 8 Software is different 9 ● Software Engineering ≠ Traditional Engineering ● Software ≠ (cars, bridges, houses, airplanes, phones, etc) ● Software ≠ (physical products) ● Software is abstract and flexible Software is different Complexity Conformity Ease of Changes Invisibility 10 These factors make SE different from other engineering fields Problems with Waterfall 1. Requirements often change ○ Complete requirements specification takes time ○ By the time it's finished, the world has changed! 2. Customers usually don't know what they want 3. Documentation is verbose and quickly becomes outdated 11 Agile Manifesto (2001) ● Meeting of 17 software engineers in Utah ● New model: incremental and iterative 12 https://siamchamnankit.co.th/history-some-pictures-and-pdfs-of-the-agile-manifesto-meeting-on-2001-a33c40bcc2b Types of Software Systems 13 The ABC of Software Engineering ● Classification proposed by Bertrand Meyer ● Three types of software: ○ Type C (Casual) ○ Type B (Business) ○ Type A (Acute) 14https://bertrandmeyer.com/2013/03/25/the-abc-of-software-engineering Casual Systems (Type C) ● Very common ● Small systems, not very important ● Can have bugs; sometimes, they are temporary ● Implemented by 1-2 devs ● They don't benefit much from what we'll study here ● The main risk is over-engineering 15 Business Systems (Type B) ● Very important to an organization ● Systems that benefit from what we will study here ● Risk: if we do not use SE techniques, they may become a liability, rather than an asset for organizations 16 Acute Systems (Type A) ● Software where nothing can go wrong, as the cost is immense, in terms of human lives and/or $$$ ● Mission-critical systems 17 Subway Aviation Medicine Acute Systems ● May require certifications ● Beyond the scope of our course ● We presume Type B system for our course project 18 Agile – Brief Overview Page 19 Agile and Software Development Methodologies • Software Engineering – Why and What? • Agile – Brief Review • Technical Debt Management in Agile Teams • DevOps, Continuous Integration, Continuous Delivery (CI/CD) Processes ● Activities that should be followed to build a software system ● Two main types: ○ Waterfall ○ Agile Why Follow a Process at All? ● Contemporary software too complex to be developed by a single developer ○ Software Engineering takes places in teams ● Teams require a development process, which allows them to: ○ organize ○ coordinate ○ motivate ○ evaluate ○ promote productivite ○ align with organization goals ○ within team members: clarify expectations and reduce misalignment ● At least a lightweight process is important But Waterfall did not work with software 23 Challenge #1: Requirements 24 ● Often, customers don't know what they want: ○ Feature space is “infinite” or hard to predict ○ World changes! ● It's not possible anymore to spend: ○ 1 year defining the requirements ○ 1 year designing the system ○ 1 year implementing the system ○ etc ● When the software is ready, it may already be obsolete! Challenge #2: Detailed Documentation 25 ● Verbose and of limited use ● In practice, not used during the implementation phase ● Plan-and-document did not work with software Evidence based pivot CHAOS Report (1994): percentage of projects exceeding their deadlines (for each range of overrun) CHAOS Report (1994): percentage of projects exceeding their budgets (for each range of overrun) Agile Manifesto (2001) 27 The Manifesto reads: “Through this work, we have come to value: ● Individuals and interactions over processes and tools ● Working software over comprehensive documentation ● Customer collaboration over contract negotiation ● Responding to change over following a plan.” Key idea: iterative development 29 Waterfall Agile S++ = product increment Iterative Development 30 ● Let's consider a large and complex system ● What's the smallest feature increment we can deliver in 15 days and validate with users? ● Validation is very important ● Customers usually don't know what they want! Other characteristics 31 ● Less emphasis on documentation ● Less emphasis on big design upfront (BDUF) ● Customer involvement ● New programming practices: tests, refactoring, CI/CD, etc. Agile Methods 32 Agile Methods 33 ● Agile principles are quite broad, generic, non-specific. ● To give consistency to agile ideas and make them more concrete and actionable: ○ Define specific methods, even if lightweight ○ Workflow, events, roles, practices, principles, etc ● Remember: These are all just recommendations! Agile Methods 34 ● Extreme Programming (XP) ● Scrum ● Kanban Scrum 35 The default method to use for your project in this course Scrum 36 ● Proposed by Jeffrey Sutherland and Ken Schwaber OOPSLA 1995 Scrum – Big Idea Freeze requirements during short iterations Main event: Sprints 38 ● Up to 1 month, usually 15 days Sprint 1 Sprint 2 Sprint 3 Sprint 4 … System System System New Features What is done in a sprint? 39 ● Team implements user stories ● User stories ⇒ features ● Example from a Q&A Forum: A logged-in user should be able to post questions. Since it’s a programming forum, questions may incorporate code blocks, which must be presented in a differentiated layout. User stories are written on cards Who writes the stories? 40 ● Product Owner (PO): mandatory role in Scrum ● Expert in the problem domain Scrum 42 PO DevsStakeholders ● During the sprints, PO explains stories to devs ● We change from formal/written to informal/verbal specs talks to talks to What does a PO do? 44 ● Write the user stories ● Explain the user stories to the devs ● Define the \"acceptance tests\" for the user stories ● Prioritize the user stories Product Backlog 45 ● List of user stories (and other important work items) ● Two characteristics: ○ Prioritized: top stories have higher priority ○ Dynamic: stories can come and go Which stories will be implemented in the next sprint? 47 ● Decision taken at the start of the sprint ● In a meeting called sprint planning: ○ PO proposes stories they'd like to see implemented ○ Devs decide if they have the velocity to implement them Important 48 ● In Scrum teams, everyone is at the same hierarchical level ● The PO is not the manager of the Devs, but an expert in the product domain ● Devs, as the technical experts, can say they won't be able to implement everything the PO wants in a single sprint Sprint Planning 49 ● 1st part: team defines the stories of the sprint ● 2nd part: stories are broken down into tasks, which are allocated to devsExample: Q&A Forum 50 Product Backlog 51 Product Backlog 52 stories selected for the next sprint Sprint Backlog: tasks of the selected stories 53 ● Install the database and create initial tables ● Install Node.js and Express ● Create and test a route using Express ● Implement the question page in the frontend ● Implement the backend logic for creating questions ● Implement the answer page in the frontend ● Implement the backend logic for answering question Sprint is ready to start! 54 Scrum Teams 55 ● Small (size of a basketball to a football team) ● Including 1 PO and 1 Scrum Master ● Cross-functional: devs, UX designers, data scientists, etc. Scrum Master (SM) 56 ● Expert who helps the team to follow Scrum ● SM is not the manager of the team, but a serving leader ● “Remover” of non-technical impediments ○ Example: developers don't have good computers ● SM can also collect process metrics ● SM can be part of more than one team More Scrum Events 57 Daily Meetings / Standups (15 min) 58 ● Each participant answers three questions: ○ What I did yesterday ○ What I intend to do today ○ What obstacles I’m facing (if any) ● Goals: Improve communication & anticipate problems Sprint ends with two events: Review and Retrospective 59 Sprint Review 60 ● Team shows the sprint's outcome to PO and stakeholders ● Implementation of each story can be: ○ Approved ○ Partially approved ○ Rejected ● In the last two cases, it goes back to the product backlog Sprint Retrospective 61 ● Last event of the sprint ● Team gathers to discuss two questions: ○ What went well in the sprint? ○ How can we improve? ● Goal: continuous improvement ● It should be a blameless meeting More Scrum Concepts 62 Time-box: all events have a well-defined duration 63 Done Criteria: used to consider stories done 65 ● Also called DoD (Definition of Done) ● Example: ○ Unit tests with coverage ≥ 75% ○ Code review by another dev ○ Update documentation (if API has changed) ○ Performance test (for certain stories) Scrum Board 66 Example: Mozilla project (using GitHub Projects) 67 Scrum in 1 slide 72https://www.scrum.org/resources/scrum-framework-reduce-risk-and-deliver-value-sooner 73 Interesting comment on the purpose of Scrum events https://twitter.com/i/web/status/1634572956746776577 Kanban 78 Kanban 79 ● Originated in the 1950s in Japan ● Toyota Production System ● Lean manufacturing, just-in-time production, etc Kanban = \"visual card\" 80 Kanban in Software Development 81 Kanban was first introduced for software development at Microsoft in 2004 by David Anderson, who noted that it: “...promotes a sustainable work pace for development teams by eliminating waste, delivering consistent value, and fostering a culture of continuous improvement.” Kanban vs Scrum 82 ● Kanban is simpler ● No sprints ● It's not mandatory to have roles and events, including: ○ Scrum master ○ Daily Scrum, Retrospectives, Reviews ● Team defines roles and events ● Fewer artifacts ○ Main artifact: Kanban Board Kanban Board 83 Large columns in the board: kanban steps 1st sub- column 2nd sub- column Time We will explain shortly Kanban is a Pull System 84 ● Members: a. Pull a task to work on b. Complete the task and move it forward on the board c. Go back to step (a) Final Comments on Kanban vs Scrum 99 ● Simpler than Scrum ○ Recommened for mature teams ○ Perhaps, start with Scrum and then move to Kanban? ○ For this course: Probably best to use Scrum There is a section on the moodle book that compares and contrasts: XP, Scrum, and Kanban Non-Agile Processes 103 Iterative Methods ● Transition Waterfall (~1970) to Agile (~2000) was gradual ● Iterative or evolutionary methods were proposed, before the dissemination of agile principles ● Examples: ○ Spiral Method (1986) ○ Rational Unified Process (2003) 104 Spiral Model 105 Proposed by Barry Boehm Iterations: 6 to 24 months (then, longer than in XP or Scrum) Rational Unified Process (RUP) ● Rational was a company acquired by IBM ● Key characteristic: plan-and-document, using UML and CASE tools 106 CASE: Computer-Aided Software Engineering 107 Name comes from CAD systems (used in traditional engineering) Before concluding 108 ● Processes are not used 100% as in the textbooks ● Treat everthing you read about these methods as a suggestion ● Experimentation is important! Technical Debt Management in Agile Teams Page 109 Agile and Software Development Methodologies • Software Engineering – Why and What? • Agile – Brief Review • Technical Debt Management in Agile Teams • DevOps, Continuous Integration, Continuous Delivery (CI/CD) Technical Debt 111 ● Code elements of unsatisfactory quality / “buggy” ● Initially ignored because impact negligible / not noticeable ● Overtime, can grow until the cumulative impact is significant Technical Debt – Some Definitions ● “... gap between the current state of a software system and some hypothesized ‘ideal’ state in which the system is optimally successful in a particular environment”1 ● Other examples of such definitions include2: ○ “the degree of incompleteness” ○ “a backlog of deferred technical problems” and ○ “any side of the current system that is considered suboptimal from a technical perspective”. 1 Brown, Nanette, et al. \"Managing technical debt in software-reliant systems.\" Proceedings of the FSE/SDP workshop on Future of software engineering research. 2010. 2 Edith Tom, Aybüke Aurum, Richard Vidgen, An exploration of technical debt, Journal of Systems and Software, Volume 86, Issue 6, 2013. Technical Debt is not just “Code debt” ● Code debt ● Design and architectural debt ● Environmental debt ● Knowledge distribution and documentation debt ● Testing debt Technical debt – Not always bad ● A little debt is not necessarily “bad” ○ In the Agile methodology, it is almost inevitable ○ Can help speed up the development process in the short term ● ● If allowed to accumulate though, can lead to slower development, kill productivity. ○ Agile Methodology due to its nature is specially exposed to this risk ● Global technical debt in 2010 was estimated to be $US 500 Billion. Code (or Bad) Smells ● Indicators of low-quality code ● Code that is hard to maintain, understand, modify or test ● Therefore, it is a candidate for refactoring 118 Catalog of Code Smells ● Duplicated Code ● Long Methods ● Large Classes ● Feature Envy ● Long Parameter List ● Global Variables 119 ● Primitive Obsession ● Mutable Objects ● Data Classes ● Comments Addressing Technical (Code) Debt ● The main agile tool to address technical debt is: Refactoring ● You can however also address this more proactively, by redefining what you mean by “done” ○ E.g. Make automated testing part of the original story / bug fix Refactoring ● Code transformations that improve maintainability without affecting external behavior 121 Catalog of Refactorings ● Extract Method ● Inline Method ● Move Method ● Extract Class ● Renaming ● etc 122 DevOps, Continuous Integration / Continuous Delivery (CI/CD) Page 123 Agile and Software Development Methodologies • Software Engineering – Why and What? • Agile – Brief Review • Technical Debt Management in Agile Teams • DevOps, Continuous Integration, Continuous Delivery (CI/CD) This is about the last mile... ... putting the code into production This Photo by Unknown Author is licensed under CC BY-NC-ND In the past, deployment was a challenging and high-risk process 126 Two independent silos, with very little communication Ops = system administrators, support, sysadmin, IT personnel, etc 127 Central idea of DevOps: Bridging the gap between Dev and Ops 128 \"Imagine a world where product owners, development, QA, IT Operations, and Infosec work together, not just to aid each other, but to guarantee the overall success of the organization.\" Objective: eliminate the \"blame culture\" Dev: \"The problem is not in my code, but in your server\" Ops: \"The problem is not in my server, but in your code\" 129 DevOps Principles ● Foster collaboration between Devs and Ops teams ● Apply an agile mindset throughout the deployment phase ● Transform deployments into a routine operation ● Deploy software every day ● Automate the deployment process 130131 \"Instead of starting deployments at midnight on Friday and spending the weekend working to complete them, deployments occur on any business day when everyone is in the company and without customers noticing —except when they encounter new features and bug fixes.\" DevOps Practices ● Version Control ● Continuous Integration ● Branching Strategies ● Continuous Deployment ● Feature Flags 132 Continuous Integration 133 In the past: feature branches were very common 134 Result after 40 days: merge hell 135 If a task causes pain, it's best not to let it accumulate; instead, tackle it daily 136 Continuous Integration (CI) ● First introduced in XP ● CI emphasizes frequent code integration into the main branch ● How often? Most authors recommend at least daily 137 Continuous Deployment 138 Continuous Deployment (CD) ● CI: integrate code frequently ● CD: integrated code goes immediately into production ● Goal: rapid experimentation and feedback! 139 How to keep partial implementations from reaching customers? 140 Feature Flags (also called feature toggles) 141 While the feature is being developed! In Summary ● Agile methodology was a response to software engineering projects taking too long and costing too much – It is now the dominant software design methodology ● An iterative, flexible approach that prioritizes: ○ collaboration ○ customer feedback ○ continuous improvement ○ product (over documentation) ● It is an abstract idea that can be realized by various methods, e.g. XP, Scrum,. Kanban ○ Scrum is the most structured approach from these three, most popular, and the one we use by default in this course ● Technical debt is an existential risk that must be deliberately addressed ● DevOps, CI and CD are closely related approaches","libVersion":"0.3.2","langs":""}