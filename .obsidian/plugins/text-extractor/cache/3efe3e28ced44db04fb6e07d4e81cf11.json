{"path":"software engineering/year 2/semester 1/Practical Algorithms/Slides/8. Formal Reasoning/Rules of Inference.pdf","text":"Rules of inference & methods of proof Dr S Waqar Nabi School of Computing Science University of Glasgow syed.nabi@glasgow.ac.uk This Photo by Unknown Author is licensed under CC BY This Photo by Unknown Author is licensed under CC BY-SA MOTIVATING THE TOPIC First: Defining “Premise” • A proposition that is assumed to be true in a certain context. E.g.: − All men are mortal − Socrates is a man − All GA students take PA − Someone took that last cupcake I had my eye on • Premises are used as the basis of logical reasoning: − e.g., contructing valid arguments With Apologies to The Socrates Example • Say we have the two premises: − “All men are mortal.” − “My pet cat is a mortal.” • And the conclusion: − “My pet cat is a man.” • Huh?! This Photo by Unknown Author is licensed under CC BY-SA-NC With Apologies to The Socrates Example • Say we have the two premises: − “All men are mortal.” − “My pet cat is a mortal.” • And the conclusion: − “My pet cat is a man.” • Huh?! This Photo by Unknown Author is licensed under CC BY-SA-NC Invalid argument! With Apologies to The Socrates Example • Say we have the two premises: − “All men are mortal.” − “Socrates is a mortal.” • And the conclusion: − “Socrates is a man.” With Apologies to The Socrates Example • Say we have the two premises: − “All men are mortal.” − “Socrates is a mortal.” • And the conclusion: − “Socrates is a man.” Invalid argument! The Socrates ARGUMENT Example • Say we have the two premises: − “All men are mortal.” − “Socrates is a man.” • And the conclusion: − “Socrates is mortal.” The Socrates ARGUMENT Example • Say we have the two premises: − “All men are mortal.” − “Socrates is a man.” • And the conclusion: − “Socrates is mortal.” Valid argument! The Socrates ARGUMENT Example • Say we have the two premises: − “All men are mortal.” − “Socrates is a man.” • And the conclusion: − “Socrates is mortal.” • This conclusion is correct? (Yes it is) • How do we ensure our conclusions are correct given certain premises − That is: how do we construct valid arguments • Are there are other such “valid” forms of arguments? • Can we build more complex arguments from simpler arguments? • How does this apply to CS and SE? Valid argument! The Socrates ARGUMENT Example • Say we have the two premises: − “All men are from Mars.” − “Socrates is a man.” • And the conclusion: − “Socrates is from Mars.” The Socrates ARGUMENT Example • Say we have the two premises: − “All men are from Mars.” − “Socrates is a man.” • And the conclusion: − “Socrates is from Mars.” Valid argument! Achtung!* • We are only looking at the structure of valid arguments. − That is, going from premises (propositions assumed to be true) to − a conclusion that logically follows from the premises. • We are not concerned (here at least) about the “factful-ness” of our conclusions. − Our premises may “in actual fact” be false, but if we use valid forms of argument, then the conclusions are also valid • the conclusions may “in actual fact” be false, we don’t care − Similarly: We arrive at a conclusion that is “in actual fact” true, but if the argument we used to arrive at that conclusion was invalid, so is the conclusion! * Meaning of Achtung https://www.merriam-webster.com/dictionary/Achtung%21 ** Why I know this word: https://www.youtube.com/watch?v=MRpTtNLM6pk&list=PLv8ZCmeG525b0jnqIinTk2m33pMJpfJLa This Topic... • We will look at what arguments are, and how to construct valid arguments • Once we know how to build correct arguments, we will learn how to create: proofs for theorems What kind of theorems do want to prove in Computing Science? − program verification (correctness, termination, invariance, liveness) − security (operating systems, file systems) − software specification (consistent, quality of service, functional behaviour) − types are correct in a program (type checking) − ... Topic Outline • Valid Arguments and Rules of Inference • Proof Methods and Strategies VALID ARGUMENTS & RULES OF INFERENCE This Photo by Unknown Author is licensed under CC BY-NC Topic Outline • Valid Arguments and Rules of Inference − Valid Arguments − Inference Rules for Propositional Logic − Using Rules of Inference to Build Arguments − Rules of Inference for Quantified Statements − Building Arguments for Quantified Statements • Proof Methods and Strategies The Argument: Definition • An argument, more fully a premise–conclusion argument, is a two-part system composed of premises and conclusion. • An argument is valid if and only if its conclusion is a consequence of its premises. https://en.wikipedia.org/wiki/Argument%E2%80%93deduction%E2%80%93proof_distinctions The Argument • An argument, more fully a premise–conclusion argument, is a two-part system composed of premises and conclusion. • An argument is valid if and only if its conclusion is a consequence of its premises. • We can express the premises (above the line) and the conclusion (below the line) as an argument: conclusion given below the bar premises listed above the bar Valid Arguments and Rules of Inference • We will show how to construct valid arguments in two stages; − first for propositional logic and then − for predicate logic. • The rules of inference are the essential building block in the construction of valid arguments. 1. Inference rules for Propositional Logic 2. Inference rules for Predicate Logic • Inference rules for propositional logic plus additional inference rules to handle variables and quantifiers. Valid Arguments and Rules of Inference • We will show how to construct valid arguments in two stages; − first for propositional logic and then − for predicate logic. • The rules of inference are the essential building block in the construction of valid arguments. 1. Inference rules for Propositional Logic 2. Inference rules for Predicate Logic • Inference rules for propositional logic plus additional inference rules to handle variables and quantifiers. Arguments in Propositional Logic • A argument in propositional logic is a sequence of propositions. − All but the final proposition are called premises. − The last statement is the conclusion. • The argument is valid if the premises imply the conclusion. • An argument form is an argument that is valid no matter what propositions are substituted into its propositional variables. • Given that an argument form is valid; then if the premises are p1 ,p2, …,pn and the conclusion is q then (p1 ∧ p2 ∧ … ∧ pn ) → q is (i.e. should be) a tautology. • Inference rules are all simple argument forms that will be used to construct more complex argument forms. Topic Outline • Valid Arguments and Rules of Inference − Valid Arguments − Inference Rules for Propositional Logic − Using Rules of Inference to Build Arguments − Rules of Inference for Quantified Statements − Building Arguments for Quantified Statements • Proof Methods and Strategies This Photo by Unknown Author is licensed under CC BY-SA-NC Rules of Inference for Propositional Logic: Modus Ponens Example: Let p be “It is snowing.” Let q be “I will study discrete math.” “If it is snowing, then I will study discrete math.” “It is snowing.” “Therefore , I will study discrete math.” Corresponding Tautology: (p ∧ (p →q)) → q (Remember: p is sufficient for q Rules of Inference for Propositional Logic: Modus Tollens Example: Let p be “it is snowing.” Let q be “I will study discrete math.” “If it is snowing, then I will study discrete math.” “I will not study discrete math.” “Therefore , it is not snowing.” Corresponding Tautology: (¬q∧(p →q))→¬p (Remember: q is necessary for p Rules of Inference for Propositional Logic: Hypothetical Syllogism Example: Let p be “it snows.” Let q be “I will study discrete math.” Let r be “I will get an A.” “If it snows, then I will study discrete math.” “If I study discrete math, I will get an A.” “Therefore , If it snows, I will get an A.” Corresponding Tautology: ((p →q) ∧ (q→r))→(p→ r) p q r Rules of Inference for Propositional Logic: Disjunctive Syllogism Example: Let p be “I will study discrete math.” Let q be “I will study English literature.” “I will study discrete math or I will study English literature.” “I will not study discrete math.” “Therefore , I will study English literature.” Corresponding Tautology: (¬p∧(p ∨q))→q Rules of Inference for Propositional Logic: Addition Example: Let p be “I will study discrete math.” Let q be “I will visit Paris.” “I will study discrete math.” (p is TRUE) “Therefore, I will study discrete math or I will visit Paris.” (p V q) is TRUE Corresponding Tautology: p →(p ∨q) Rules of Inference for Propositional Logic: Addition Another example: Recall from before Let p be “I will study discrete math.” Let q be “I will visit Paris.” “I will study discrete math.” “Therefore, I will study discrete math or I will visit Paris.” Corresponding Tautology: p →(p ∨q) Rules of Inference for Propositional Logic: Simplification Example: Let p be “I will study discrete math.” Let q be “I will study English literature.” “I will study discrete math and English literature” (p and q is TRUE) “Therefore, I will study discrete math.” (p is TRUE) Corresponding Tautology: (p∧q) →p Rules of Inference for Propositional Logic: Conjunction Example: Let p be “I will study discrete math.” Let q be “I will study English literature.” “I will study discrete math.” “I will study English literature.” “Therefore, I will study discrete math and I will study English literature.” Corresponding Tautology: ((p) ∧ (q)) →(p ∧ q) Rules of Inference for Propositional Logic: Resolution Example: Let p be “I will study discrete math.” Let r be “I will study English literature.” Let q be “I will study databases.” “I will not study discrete math or I will study English literature.” “I will study discrete math or I will study databases.” “Therefore, I will study databases or I will study English literature.” Corresponding Tautology: ((¬p ∨ r ) ∧ (p ∨ q)) →(q ∨ r) Rules of Inference for Propositional Logic: SummaryTopic Outline • Valid Arguments and Rules of Inference − Valid Arguments − Inference Rules for Propositional Logic − Using Rules of Inference to Build Arguments − Rules of Inference for Quantified Statements − Building Arguments for Quantified Statements • Proof Methods and Strategies This Photo by Unknown Author is licensed under CC BY-SA-NC Using the Rules of Inference to Build Valid Arguments • A valid argument is a sequence of statements. • Each statement is either a premise or follows from previous statements by rules of inference. • The last statement is called conclusion. • A valid argument takes the following form: S1 S2 . . . Sn C Hypothetical Syll’mModus ponensModus tollensDisjunctive Syll’mResolutionConjunctionSimplificationAddition Rules of Inference for Propositional Logic This Photo by Unknown Author is licensed under CC BY Motivating Example • It is not sunny this afternoon and it is colder than yesterday. If we go swimming, then it is sunny. If we do not go swimming, then we will take a canoe trip. If we take a canoe trip, then we will be home by sunset. Motivating Example • It is not sunny this afternoon and it is colder than yesterday. If we go swimming, then it is sunny. If we do not go swimming, then we will take a canoe trip. If we take a canoe trip, then we will be home by sunset. • Therefore: we will be home by sunset Motivating Example • It is not sunny this afternoon and it is colder than yesterday. If we go swimming, then it is sunny. If we do not go swimming, then we will take a canoe trip. If we take a canoe trip, then we will be home by sunset. • Therefore: we will be home by sunset This Photo by Unknown Author is licensed under CC BY-SA-NC Rules of Inference to Build Valid Argument - Example (Atomic) Propositions* − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset *These are simply the base, or “atomic” propositions in our problem statement. We want to assign labels to them to be able to use them in our argument. That is, this is just labelling of propositions. We are not saying (here) which of them are true or false. Rules of Inference to Build Valid Argument - Example (Atomic) Propositions* − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises** − it is not sunny this afternoon and it is colder than yesterday − if we go swimming, then it is sunny − if we do not go swimming, then we will take a canoe trip − if we take a canoe trip, then we will be home by sunset *These are simply the base, or “atomic” propositions in our problem statement. We want to assign labels to them to be able to use them in our argument. That is, this is just labelling of propositions. We are not saying (here) which of them are true or false. ** The premises are then contructed through the (atomic) propositions and connectives. THESE are the known-to-be- TRUE propositions. Rules of Inference to Build Valid Argument - Example (Atomic) Propositions* − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises** − it is not sunny this afternoon and it is colder than yesterday − if we go swimming, then it is sunny − if we do not go swimming, then we will take a canoe trip − if we take a canoe trip, then we will be home by sunset Conclusion − we will be home by sunset *These are simply the base, or “atomic” propositions in our problem statement. We want to assign labels to them to be able to use them in our argument. That is, this is just labelling of propositions. We are not saying (here) which of them are true or false. ** The premises are then contructed through the (atomic) propositions and connectives. THESE are the known-to-be- TRUE propositions. Rules of Inference to Build Valid Argument - Example Propositions − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises − it is not sunny this afternoon and it is colder than yesterday ¬p∧q − if we go swimming, then it is sunny − if we do not go swimming, then we will take a canoe trip − if we take a canoe trip, then we will be home by sunset Conclusion − we will be home by sunset Rules of Inference to Build Valid Argument - Example Propositions − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises − it is not sunny this afternoon and it is colder than yesterday ¬p∧q − if we go swimming, then it is sunny r➝p − if we do not go swimming, then we will take a canoe trip − if we take a canoe trip, then we will be home by sunset Conclusion − we will be home by sunset Rules of Inference to Build Valid Argument - Example Propositions − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises − it is not sunny this afternoon and it is colder than yesterday ¬p∧q − if we go swimming, then it is sunny r➝p − if we do not go swimming, then we will take a canoe trip ¬r➝s − if we take a canoe trip, then we will be home by sunset Conclusion − we will be home by sunset Rules of Inference to Build Valid Argument - Example Propositions − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises − it is not sunny this afternoon and it is colder than yesterday ¬p∧q − if we go swimming, then it is sunny r➝p − if we do not go swimming, then we will take a canoe trip ¬r➝s − if we take a canoe trip, then we will be home by sunset s➝t Conclusion − we will be home by sunset Rules of Inference to Build Valid Argument - Example Propositions − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises − it is not sunny this afternoon and it is colder than yesterday ¬p∧q − if we go swimming, then it is sunny r➝p − if we do not go swimming, then we will take a canoe trip ¬r➝s − if we take a canoe trip, then we will be home by sunset s➝t Conclusion − we will be home by sunset t Rules of Inference to Build Valid Argument - Example Propositions − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises − it is not sunny this afternoon and it is colder than yesterday ¬p∧q − if we go swimming, then it is sunny r➝p − if we do not go swimming, then we will take a canoe trip ¬r➝s − if we take a canoe trip, then we will be home by sunset s➝t Conclusion − we will be home by sunset t Rules of Inference to Build Valid Argument - Example Propositions − p: it is sunny this afternoon − q: it is colder than yesterday − r: we go swimming − s: we take a canoe trip − t: we will be home by sunset Premises − it is not sunny this afternoon and it is colder than yesterday ¬p∧q − if we go swimming, then it is sunny r➝p − if we do not go swimming, then we will take a canoe trip ¬r➝s − if we take a canoe trip, then we will be home by sunset s➝t Conclusion − we will be home by sunset t p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t We now need to show that given the premises p1 – p4, we can build a valid argument to show the conclusion p5 is true Premises p1,…,p4 and conclusion p5 Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Premises p1,…,p4 and conclusion p5 1. ¬p∧q (premise p1) 2. ¬p (simplification of 1) Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Premises p1,…,p4 and conclusion p5 1. ¬p∧q (premise p1) 2. ¬p (simplification of 1) 3. r➝p (premise p2) Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Premises p1,…,p4 and conclusion p5 1. ¬p∧q (premise p1) 2. ¬p (simplification of 1) 3. r➝p (premise p2) 4. ¬r (modus tollens using 2 and 3) Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Premises p1,…,p4 and conclusion p5 1. ¬p∧q (premise p1) 2. ¬p (simplification of 1) 3. r➝p (premise p2) 4. ¬r (modus tollens using 2 and 3) 5. ¬r➝s (premise p3) Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Premises p1,…,p4 and conclusion p5 1. ¬p∧q (premise p1) 2. ¬p (simplification of 1) 3. r➝p (premise p2) 4. ¬r (modus tollens using 2 and 3) 5. ¬r➝s (premise p3) 6. s (modus ponens using 4 and 5) Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Premises p1,…,p4 and conclusion p5 1. ¬p∧q (premise p1) 2. ¬p (simplification of 1) 3. r➝p (premise p2) 4. ¬r (modus tollens using 2 and 3) 5. ¬r➝s (premise p3) 6. s (modus ponens using 4 and 5) 7. s➝t (premise p4) Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Premises p1,…,p4 and conclusion p5 1. ¬p∧q (premise p1) 2. ¬p (simplification of 1) 3. r➝p (premise p2) 4. ¬r (modus tollens using 2 and 3) 5. ¬r➝s (premise p3) 6. s (modus ponens using 4 and 5) 7. s➝t (premise p4) 8. t (modus ponens using 6 and 7) Rules of Inference to Build Valid Argument - Example p1: ¬p∧q p2: r➝p p3: ¬r➝s p4: s➝t p5: t Constructing a proof tree ¬p∧q (prem1) ¬p (simplification) r➝p (prem2) ¬r (modus tollens) ¬r➝s (prem3) s (modus ponens) s➝t (prem4) t (modus ponens) Constructing a proof tree Proof Tree root at bottom – the (overall) conclusion. leaves are axioms – the premises (which themselves may be intermediate “conclusions” from earlier premises) ¬p∧q (prem1) ¬p (simplification) r➝p (prem2) ¬r (modus tollens) ¬r➝s (prem3) s (modus ponens) s➝t (prem4) t (modus ponens) Rules of Inference to Build Valid Argument You might think of this as a game − you are given some statement(s), and you want to see they form a valid argument A template for solving such problems by building a valid argument [Think of it as a game ☺] 1. Identify and label the “atomic” propositions 2. Using the given information (relationship between the propositions), list the premises using propositions + connectives 3. Write down the proposition you need to prove (the conclusion) 4. Apply RULES OF INFERENCE to derive conclusion from the premises. − Creating intermediate premises along the way, as needed Exercise • Revisit the “Whodunnit” example from an earlier problem set. Solve it again, only this time, label each step with the appropriate rule of inference Rules of Inference to Build Valid Argument – A More Relevant Example for Us Assume we know: − if (y>4 and z<10), then procedure P will be called (premise1) − (x>3 or y>4) is an invariant of the program (premise2) Question: when running my program with program variables x,y,z and given a state where x=2 and z=4, will procedure P be called? Rules of Inference to Build Valid Argument – A More Relevant Example for Us Assume we know: − if (y>4 and z<10), then procedure P will be called (premise1) − (x>3 or y>4) is an invariant of the program (premise2) Question: when running my program with program variables x,y,z and given a state where x=2 and z=4, will procedure P be called? Rules of Inference to Build Valid Argument – A More Relevant Example for Us Assume we know: − if (y>4 and z<10), then procedure P will be called (premise1) − (x>3 or y>4) is an invariant of the program (premise2) Question: when running my program with program variables x,y,z and given a state where x=2 and z=4, will procedure P be called? Let p: y > 4 q: z < 10 r: x > 3 s: procedure P is called Rules of Inference to Build Valid Argument – A More Relevant Example for Us Assume we know: − if (y>4 and z<10), then procedure P will be called (premise1) − (x>3 or y>4) is an invariant of the program (premise2) Question: when running my program with program variables x,y,z and given a state where x=2 and z=4, will procedure P be called? p1: (p ∧ q) ➝ s p2: (r ∨ p) p3: ¬r p4: q -------------- p5: s Let p: y > 4 q: z < 10 r: x > 3 s: procedure P is called Rules of Inference to Build Valid Argument – A More Relevant Example for Us Assume we know: − if (y>4 and z<10), then procedure P will be called (premise1) − (x>3 or y>4) is an invariant of the program (premise2) Question: when running my program with program variables x,y,z and given a state where x=2 and z=4, will procedure P be called? − add the premises: ¬(x>3) (premise3) and z<10 (premise4) p1: (p ∧ q) ➝ s p2: (r ∨ p) p3: ¬r p4: q -------------- p5: s Rules of Inference to Build Valid Argument – A More Relevant Example for Us Assume we know: − if (y>4 and z<10), then procedure P will be called (premise1) − (x>3 or y>4) is an invariant of the program (premise2) Question: when running my program with program variables x,y,z and given a state where x=2 and z=4, will procedure P be called? − add the premises: ¬(x>3) (premise3) and z<10 (premise4) p1: (p ∧ q) ➝ s p2: (r ∨ p) p3: ¬r p4: q -------------- p5: s r ∨ p (p2) ¬r (p3) p (disjunctive syllogism) q (p4) p ∧ q (Conjunction) p ∧ q ➝ s (p1) s (modus ponens) The power of such “deductive” reasoning • Based on rules of inference which are simple, almost childishly obvious. • But: given that they are rigorously applied, complex arguments can be built, which are far from obvious intuitively, but are provably, mathematically correct. Topic Outline • Valid Arguments and Rules of Inference − Valid Arguments − Inference Rules for Propositional Logic − Using Rules of Inference to Build Arguments − Rules of Inference for Quantified Statements (Predicate Logic) − Building Arguments for Quantified Statements • Proof Methods and Strategies ∃∀ Handling Quantified Statements • Valid arguments for quantified statements are a sequence of statements. • Each statement is either a premise or follows from previous statements by rules of inference which include: − Rules of Inference for Propositional Logic − Rules of Inference for Quantified Statements • The rules of inference for quantified statements are introduced in the next several slides Universal Instantiation (UI) Universal Instantiation (UI) Example: Our domain consists of all dogs and Fido is a dog. “All dogs are cuddly.” “Therefore, Fido is cuddly.” Universal Generalization (UG) Used often implicitly in Mathematical Proofs. Existential Instantiation (EI) Existential Instantiation (EI) Example: “There is someone who got an A in the course.” “Let’s call her a and say that a got an A” Existential Generalization (EG) Existential Generalization (EG) Example: “Michelle got an A in the class.” “Therefore, someone got an A in the class.” Rules of Inference for Quantified Statements: SummaryUsing Rules of Inference Example 1: Using the rules of inference, construct a valid argument to show that “Jean has a GUID” is a consequence of the premises: “Everyone who is a student of GU has a GUID” “Jean is a student of GU.” Using Rules of Inference Example 1: Using the rules of inference, construct a valid argument to show that “Jean has a GUID” is a consequence of the premises: “Everyone who is a student of GU has a GUID” “Jean is a student of GU.” Solution: Let S(x) denote “x is a student of GU” and ID(x) denote “x has a GUID” and Jean be a member of the domain of discourse U = students of GU Valid Argument: ? Using Rules of Inference Example 1: Using the rules of inference, construct a valid argument to show that “Jean has a GUID” is a consequence of the premises: “Everyone who is a student of GU has a GUID” “Jean is a student of GU.” Solution: Let S(x) denote “x is a student of GU” and ID(x) denote “x has a GUID” and Jean be a member of the domain of discourse U = students of GU Valid Argument: 1. ∀𝑥 (𝑆 𝑥 → 𝐼𝐷 𝑥 Premise; Everyone who is a student of GU has a GUID 2. 𝑆 𝐽 → 𝐼𝐷 𝐽 UI from (1); If Jean is a student of GU, then she has a GUID 3. 𝑆 𝐽 Premise; Jean is a student of GU 4. 𝐼𝐷 𝐽 Modes Ponens using 2 and 3: Jean has a GUID Using Rules of Inference – on your own Example 2: Use the rules of inference to construct a valid argument showing that the conclusion “Someone who passed the first exam has not read the book.” follows from the premises “A student in this class has not read the book.” “Everyone in this class passed the first exam.” Solution: Let C(x) denote “x is in this class,” B(x) denote “ x has read the book,” and P(x) denote “x passed the first exam.” First we translate the premises and conclusion into symbolic form. Continued on next slide → Using Rules of Inference Valid Argument: Returning to the Socrates Example All men are mortal Socrates is a man Therefore, Socrates is mortal Returning to the Socrates Example All men are mortal Socrates is a man Therefore, Socrates is mortal Returning to the Socrates Example All men are mortal Socrates is a man Therefore, Socrates is mortal Solution for Socrates Example Valid Argument All men are mortal Socrates is a man Therefore, Socrates is mortal Solution for Socrates Example Valid Argument All men are mortal Socrates is a man Therefore, Socrates is mortal Universal Modus Ponens Universal Modus Ponens combines universal instantiation and modus ponens into one rule. This rule could be used in the Socrates example. PROOF METHODS AND STRATEGIESRules of inference & methods of proof • Valid Arguments and Rules of Inference • Proof Methods and Strategies Proofs of Mathematical Statements • A proof is a valid argument that establishes the truth of a statement. Proofs of Mathematical Statements • A proof is a valid argument that establishes the truth of a statement. • In math, CS, and other disciplines, informal proofs which are generally shorter, are mostly used. − More than one rule of inference are often used in a step. − Steps may be skipped. − The rules of inference used are not explicitly stated. − Easier to understand and to explain to people. − But it is also easier to introduce errors. Proofs of Mathematical Statements • A proof is a valid argument that establishes the truth of a statement. • In math, CS, and other disciplines, informal proofs which are generally shorter, are mostly used. − More than one rule of inference are often used in a step. − Steps may be skipped. − The rules of inference used are not explicitly stated. − Easier to understand and to explain to people. − But it is also easier to introduce errors. • Proofs have many practical applications: − verification that computer programs are correct − establishing that operating systems are secure − enabling programs to make inferences in artificial intelligence − showing that system specifications are consistent Theorem & Conjecture • Theorem: A statement (proposition) that has been proven to be true, using − other theorems − axioms (propositions which are given as true)* − rules of inference • A conjecture is a statement that is being proposed to be true. − Once a proof of a conjecture is found, it becomes a theorem. − A conjecture may also turn out to be false! • Premises and Axioms are a similar, but not the same concept. Have a look at this for a good explanation. https://qr.ae/prNo34 Theorem & Conjecture • Theorem: A statement that has been proven to be true, using − other theorems − axioms (statements which are given as true)* − rules of inference • A conjecture is a statement that is being proposed to be true. − Once a proof of a conjecture is found, it becomes a theorem. − It may turn out to be false! * Premises and Axioms are a similar, but not the same concept. Have a look at this for a good explanation. https://www.quora.com/What-is-the-difference-between-an-axiom-and-a-premise Goldbach Conjecture - Numberphile https://www.youtube.com/watch?v=MxiTG96QOxw Proving TheoremsProving Theorems • Many theorems have the form: • To prove them, we show that where c is an arbitrary element of the domain, • By universal generalization, the truth of the original formula follows. • So, we generally we are trying to prove something of the form: Methods of Proof A proof must be a logical, convincing argument Varying degrees of formality From some premises P prove some conclusion Q − i.e. show that P➝Q is true or ∀x∈X.(P(x)➝Q(x)) is true Direct and Indirect proofs Direct proof: based on the implication P➝Q 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved Direct and Indirect proofs Direct proof: based on the implication P➝Q Indirect proof: based on contrapositive P➝Q ≡ ¬Q➝¬P 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved 1. assume that Q is false (¬Q is true) 2. show P is false (¬P is true) using - rules of inference - theorems already proved Direct and indirect proofs: with Quantifiers Direct proof: based on the implication ∀x∈X.(P(x)➝Q(x)) Indirect proof: based on contrapositive ∀x∈X.(P(x)➝Q(x)) ≡ ∀x∈X.(¬Q(x)➝¬P(x)) 1. assume P(x) is true for arbitrary x∈X 2. show Q(x) is true using - rules of inference - theorems already proved 1. assume that Q(x) is false (¬Q(x) is true) for arbitrary x∈X 2. show P(x) is false (¬P(x) is true) using - rules of inference - theorems already proved Direct proof - Example First some definitions and properties we assume (have proved): − even(n) : ∃k∈ℤ.(n=2⋅k) − odd(n) : ∃k∈ℤ.(n=2⋅k+1) − ¬even(n) = odd(n) − ¬odd(n) = even(n) Direct proof - Example First some definitions and properties we assume (have proved): − even(n) : ∃k∈ℤ.(n=2⋅k) − odd(n) : ∃k∈ℤ.(n=2⋅k+1) − ¬even(n) = odd(n) − ¬odd(n) = even(n) Prove that the square of an even number is even. ∀n∈ℤ.(even(n)➝even(n2)) Direct proof: 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved Direct proof - Example First some definitions and properties we assume (have proved): − even(n) : ∃k∈ℤ.(n=2⋅k) − odd(n) : ∃k∈ℤ.(n=2⋅k+1) − ¬even(n) = odd(n) − ¬odd(n) = even(n) Prove that the square of an even number is even. ∀n∈ℤ.(even(n)➝even(n2)) Direct proof: − consider an arbitrary n∈ℤ and assume even(n) 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved Direct proof - Example First some definitions and properties we assume (have proved): − even(n) : ∃k∈ℤ.(n=2⋅k) − odd(n) : ∃k∈ℤ.(n=2⋅k+1) − ¬even(n) = odd(n) − ¬odd(n) = even(n) Prove that the square of an even number is even. ∀n∈ℤ.(even(n)➝even(n2)) Direct proof: − consider an arbitrary n∈ℤ and assume even(n) − therefore n = 2⋅k for some k∈ℤ 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved Direct proof - Example First some definitions and properties we assume (have proved): − even(n) : ∃k∈ℤ.(n=2⋅k) − odd(n) : ∃k∈ℤ.(n=2⋅k+1) − ¬even(n) = odd(n) − ¬odd(n) = even(n) Prove that the square of an even number is even. ∀n∈ℤ.(even(n)➝even(n2)) Direct proof: − consider an arbitrary n∈ℤ and assume even(n) − therefore n = 2⋅k for some k∈ℤ − hence n2 = (2⋅k)2 = 4⋅k2 = 2⋅(2⋅k2) 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved Direct proof - Example First some definitions and properties we assume (have proved): − even(n) : ∃k∈ℤ.(n=2⋅k) − odd(n) : ∃k∈ℤ.(n=2⋅k+1) − ¬even(n) = odd(n) − ¬odd(n) = even(n) Prove that the square of an even number is even. ∀n∈ℤ.(even(n)➝even(n2)) Direct proof: − consider an arbitrary n∈ℤ and assume even(n) − therefore n = 2⋅k for some k∈ℤ − hence n2 = (2⋅k)2 = 4⋅k2 = 2⋅(2⋅k2) − which is by definition even as required 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved Direct proof - Example First some definitions and properties we assume (have proved): − even(n) : ∃k∈ℤ.(n=2⋅k) − odd(n) : ∃k∈ℤ.(n=2⋅k+1) − ¬even(n) = odd(n) − ¬odd(n) = even(n) Prove that the square of an even number is even. ∀n∈ℤ.(even(n)➝even(n2)) Direct proof: − consider an arbitrary n∈ℤ and assume even(n) − therefore n = 2⋅k for some k∈ℤ − hence n2 = (2⋅k)2 = 4⋅k2 = 2⋅(2⋅k2) − which is by definition even as required 1. assume P is true 2. show Q is true using - rules of inference - theorems already proved Indirect proof – Example 1. assume that Q is false (¬Q is true) 2. show P is false (¬P is true) using - rules of inference - theorems already proved Indirect proof – Example Prove: If n2 is even, then n is even, − ∀n∈ℤ.(even(n2)➝even(n)) what we need to prove ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) equivalent contrapositive, which we will aim to prove here ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) inverse of even is odd (property already assumed/proved) 1. assume that Q is false (¬Q is true) 2. show P is false (¬P is true) using - rules of inference - theorems already proved Indirect proof – Example If n2 is even, then n is even − ∀n∈ℤ.(even(n2)➝even(n)) what we need to prove ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) equivalent contrapositive, which we will aim to prove here ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) inverse of even is odd (property already assumed/proved) Indirect proof: − consider arbitrary n∈ℤ and assume odd(n) 1. assume that Q is false (¬Q is true) 2. show P is false (¬P is true) using - rules of inference - theorems already proved Indirect proof – Example If n2 is even, then n is even − ∀n∈ℤ.(even(n2)➝even(n)) ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) contrapositive ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) property already assumed/proved Indirect proof: − consider arbitrary n∈ℤ and assume odd(n) [i.e., ¬even(n)] − then there exists k∈ℤ such that n = 2⋅k+1 (definition of odd numbers) 1. assume that Q is false (¬Q is true) 2. show P is false (¬P is true) using - rules of inference - theorems already proved Indirect proof – Example If n2 is even, then n is even − ∀n∈ℤ.(even(n2)➝even(n)) ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) contrapositive ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) property already assumed/proved Indirect proof: − consider arbitrary n∈ℤ and assume odd(n) − then there exists k∈ℤ such that n = 2⋅k+1 (definition of odd numbers) − therefore n2 = (2⋅k+1)2 = 4⋅k2 + 4⋅k + 1 expanding = 2⋅(2⋅k2 + 2⋅k) + 1 which is odd as required 1. assume that Q is false (¬Q is true) 2. show P is false (¬P is true) using - rules of inference - theorems already proved Indirect proof – Example If n2 is even, then n is even − ∀n∈ℤ.(even(n2)➝even(n)) ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) contrapositive ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) property already assumed/proved Indirect proof: − consider arbitrary n∈ℤ and assume odd(n) − then there exists k∈ℤ such that n = 2⋅k+1 (definition of odd numbers) − therefore n2 = (2⋅k+1)2 = 4⋅k2 + 4⋅k + 1 expanding = 2⋅(2⋅k2 + 2⋅k) + 1 which is odd as required 1. assume that Q is false (¬Q is true) 2. show P is false (¬P is true) using - rules of inference - theorems already proved Indirect proof – Why use it? If n2 is even, then n is even − ∀n∈ℤ.(even(n2)➝even(n)) ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) contrapositive ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) property already assumed/proved Could we have proved this directly? Indirect proof – Why use it? If n2 is even, then n is even − ∀n∈ℤ.(even(n2)➝even(n)) ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) contrapositive ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) property already assumed/proved Could we have proved this directly? − consider arbitrary n∈ℤ and assume even(n2) − n2 = 2⋅k − n = ? Indirect proof – Why use it? If n2 is even, then n is even − ∀n∈ℤ.(even(n2)➝even(n)) ≡ ∀n∈ℤ.(¬even(n)➝¬even(n2)) contrapositive ≡ ∀n∈ℤ.(odd(n)➝odd(n2)) property already assumed/proved Could we have proved this directly − consider arbitrary n∈ℤ and assume even(n2) − n2 = 2⋅k − n = ? Question: why use an indirect proof? Answer: it might lead to a far easier proof (the dual can also be true) Proving “if and only if” To prove P⟷Q prove P➝Q and prove Q➝P Proving “if and only if” To prove P⟷Q prove P➝Q and prove Q➝P Theorem: n is even if and only if n2 is even Proof. first we prove even(n)➝even(n2) using a direct proof (done) second we prove even(n2)➝even(n) using an indirect proof (done) since we have shown that even(n)➝even(n2) and even(n2)➝even(n) hold, the theorem even(n2) ⟷ even(n) follows Proof by contradiction Assume the negation of what you want to prove and show that this assumption is untenable (leads to a contradiction) − a proof by contradiction that R holds, assumes R is false and show that is untenable (cannot hold; leads to a contradiction) Proof by contradiction Assume the negation of what you want to prove and show that this assumption is untenable (leads to a contradiction) Example: to prove P implies Q (i.e. P➝Q) − assume property is false i.e. P and not Q hold (i.e. P∧¬Q) • recall in truth table for P➝Q only false entry is when P and not Q hold. So, the negation of P➝Q is P∧¬Q − derive a contradiction − conclude assumption must be false p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 Proof by contradiction Assume the negation of what you want to prove and show that this assumption is untenable (leads to a contradiction) Example: to prove P implies Q (i.e. P➝Q) − assume property is false i.e. P and not Q hold (i.e. P∧¬Q) • recall in truth table for P➝Q only false entry is when P and not Q hold. So, the negation of P➝Q is P∧¬Q − derive a contradiction − conclude assumption must be false p q p➝q 0 0 1 0 1 1 1 0 0 1 1 1 Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − Say P(n) = odd(3⋅n+2), Q(n) = odd(n) Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − Say P(n) = odd(3⋅n+2), Q(n) = odd(n) − to prove by contradiction P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − will prove by contradiction − to prove P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction • where P(n) denote odd(3⋅n+2) and Q(n) denote odd(n) − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof. − the proof is by contradiction therefore assume odd(3⋅n+2) and even(n) Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − will prove by contradiction − to prove P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction • where P(n) denote odd(3⋅n+2) and Q(n) denote odd(n) − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof. − the proof is by contradiction therefore assume odd(3⋅n+2) and even(n) − since even(n) there exists k∈ℤ such that n = 2⋅k − Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − will prove by contradiction − to prove P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction • where P(n) denote odd(3⋅n+2) and Q(n) denote odd(n) − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof. − the proof is by contradiction therefore assume odd(3⋅n+2) and even(n) − since even(n) there exists k∈ℤ such that n = 2⋅k − hence 3⋅n+2 = 3⋅(2⋅k)+2 = 6⋅k+2 = 2⋅(3⋅k+1) which is even − Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − will prove by contradiction − to prove P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction • where P(n) denote odd(3⋅n+2) and Q(n) denote odd(n) − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof. − the proof is by contradiction therefore assume odd(3⋅n+2) and even(n) − since even(n) there exists k∈ℤ such that n = 2⋅k − hence 3⋅n+2 = 3⋅(2⋅k)+2 = 6⋅k+2 = 2⋅(3⋅k+1) which is even − that is even(3⋅n+2) holds − Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − will prove by contradiction − to prove P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction • where P(n) denote odd(3⋅n+2) and Q(n) denote odd(n) − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof. − the proof is by contradiction therefore assume odd(3⋅n+2) and even(n) − since even(n) there exists k∈ℤ such that n = 2⋅k − hence 3⋅n+2 = 3⋅(2⋅k)+2 = 6⋅k+2 = 2⋅(3⋅k+1) which is even − that is even(3⋅n+2) holds − but from the assumption we have odd(3⋅n+2) yielding a contradiction − Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − will prove by contradiction − to prove P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction • where P(n) denote odd(3⋅n+2) and Q(n) denote odd(n) − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof. − the proof is by contradiction therefore assume odd(3⋅n+2) and even(n) − since even(n) there exists k∈ℤ such that n = 2⋅k − hence 3⋅n+2 = 3⋅(2⋅k)+2 = 6⋅k+2 = 2⋅(3⋅k+1) which is even − that is even(3⋅n+2) holds − but from the assumption we have odd(3⋅n+2) yielding a contradiction − therefore our assumption is untenable and the theorem holds Proof by contradiction - Example Theorem: if 3⋅n+2 is odd, then n is odd − will prove by contradiction − to prove P(n)➝Q(n) will first presume it is false, i.e. P(n)∧¬Q(n) − Then we will show that P(n)∧¬Q(n) leads to a contradiction • where P(n) denote odd(3⋅n+2) and Q(n) denote odd(n) − i.e. we show odd(3⋅n+2) ∧ ¬odd(n) leads to a contradiction − or equivalently, show that odd(3⋅n+2) ∧ even(n) leads to a contradiction Proof. − the proof is by contradiction therefore assume odd(3⋅n+2) and even(n) − since even(n) there exists k∈ℤ such that n = 2⋅k − hence 3⋅n+2 = 3⋅(2⋅k)+2 = 6⋅k+2 = 2⋅(3⋅k+1) which is even − that is even(3⋅n+2) holds − but from the assumption we have odd(3⋅n+2) yielding a contradiction − therefore our assumption is untenable and the theorem holds Trivial and Vacuous Proofs • Trivial Proof: If we know q is true, then p → q is true as well. “If it is raining then 1=1.” Trivial and Vacuous Proofs • Trivial Proof: If we know q is true, then p → q is true as well. “If it is raining then 1=1.” • Vacuous Proof: If we know p is false then p → q is true as well. “If 2 + 2 = 5 then I am from Mars” This Photo by Unknown Author is licensed under CC BY-SA Trivial and Vacuous Proofs • Trivial Proof: If we know q is true, then p → q is true as well. “If it is raining then 1=1.” • Vacuous Proof: If we know p is false then p → q is true as well. “If 2 + 2 = 5 then I am from Mars” [Even though these examples seem silly, both trivial and vacuous proofs are often used in mathematical induction] This Photo by Unknown Author is licensed under CC BY-SA Existence proof Prove, or disprove something, by presenting an instance (a witness) This can be done by − producing an actual instance − showing how to construct an instance − showing it would be absurd if an instance did not exist Example: disprove the assertion “all odd numbers are prime” − just need to produce one witness, disproving this, i.e. 9 (or 15,…) ∃ Existence proof Prove, or disprove something, by presenting an instance (a witness) This can be done by − producing an actual instance − showing how to construct an instance − showing it would be absurd if an instance did not exist Example: disprove the assertion “all odd numbers are prime” − just need to produce one witness, disproving this, i.e. 9 (or 15,…) ∃ https://www.youtube.com/watch?v=wf-sGqBsWv4 Karl Popper's Falsification What not to do – Fallacies A fallacy is an inference rule or other proof method that is not logically valid and therefore can yield a false conclusion Fallacy of affirming the conclusion − P➝Q is true, and Q is true − so P must be true? − no, because false➝true yields true − so ¬P and Q can both be true together Fallacy of denying the hypothesis − P➝Q is true and P is false − so Q must be false? − no, again because false➝true yields true If it’s sunny, I’ll take you to the beach I have taken you to the beach. So it must be sunny X If it’s sunny, I’ll take you to the beach It is not sunny So I will not take you to the beach X References 1. Schneider, G. Michael, Judith Gersting, and Sara Baase. Invitation to Computer Science : Java Version (2nd Edition). 2. Goodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. Data structures and algorithms in Java. John Wiley & Sons (5th Edition onwards). 3. Goodrich, Michael T., Roberto Tamassia, and Michael H. Goldwasser. Data structures and algorithms in Python. 4. Kent D. Lee, Steve Hubbard, Data Structures and Algorithms with Python, Springer, 2015. 5. Cormen, Thomas H., et al. Introduction to algorithms. MIT press, 2009 6. Sedgewick, Robert. Algorithms in Java, Parts 1–4 (Fundamental Algorithms, Data Structures, Sorting, Searching). Addison Wesley, 2002. 7. Discrete Mathematics & its Applications, Kenneth H. Rosen (5th, 6th, 7th or 8th Edition) +companion website 8. Gerard O'Regan, Concise Guide to Formal Methods. 9. F Oggier, Lecture Notes, Discrete Mathematics.","libVersion":"0.3.2","langs":""}